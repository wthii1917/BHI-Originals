<QuerySet>
  <Query IsView="False" IsSP="False">
    <File>Query%20set%2010-16-18.sql</File>
    <Name>Query set 10-16-18</Name>
  </Query>
  <Query IsView="False" IsSP="False">
    <SQL>


DROP TABLE IF EXISTS		clean_raw.BHI_prevalence_NDC;
DROP TABLE IF EXISTS		ref.BHI_prevalence_NDC;
CREATE TABLE				ref.BHI_prevalence_NDC
(		NDC_Code							VARCHAR( 12 )		ENCODE	ZSTD
	,	patients_With_NDC_Code_Count		INTEGER				ENCODE	ZSTD
	,	NDC_Code_Prevalence_in_BHI		DOUBLE PRECISION		ENCODE	ZSTD
)
DISTKEY( NDC_Code )
COMPOUND SORTKEY( NDC_Code );



INSERT INTO				ref.BHI_prevalence_NDC
(	WITH				Aggregate		AS
						(	SELECT	COUNT( member_ID )	AS	member_count
							FROM		clean_raw.bhi_members
						)
				,	pharm_Claims		AS
						(	SELECT DISTINCT		member_ID
											,	NDC_Code
							FROM				clean_raw.BHI_Pharmacy_Claims
						)
	SELECT			pharm_Claims.NDC_Code				AS	NDC_Code
				,	COUNT( pharm_Claims.member_ID )		AS	patients_With_NDC_Code_Count
				,	CONVERT( DOUBLE PRECISION, 1.0*COUNT( pharm_Claims.member_ID )/Aggregate.member_count )
														AS	NDC_Code_Prevalence_in_BHI
	FROM				pharm_Claims
				,	Aggregate
	GROUP BY			NDC_Code
				,	Aggregate.member_count
	ORDER BY		NDC_Code
);

--ANALYZE COMPRESSION	ref.BHI_prevalence_NDC;
ANALYZE					ref.BHI_prevalence_NDC;
VACUUM SORT ONLY			ref.BHI_prevalence_NDC;
ANALYZE					ref.BHI_prevalence_NDC;



DROP TABLE IF EXISTS		clean_raw.BHI_prevalence_CPT;
DROP TABLE IF EXISTS		ref.BHI_prevalence_CPT;
CREATE TABLE				ref.BHI_prevalence_CPT
(		CPT_Code							VARCHAR( 14 )		ENCODE	RAW
	,	patients_With_CPT_Code_Count		INTEGER				ENCODE	RAW
	,	CPT_Code_Prevalence_in_BHI		DOUBLE PRECISION		ENCODE	RAW
)
DISTKEY( CPT_Code )
COMPOUND SORTKEY( CPT_Code );



INSERT INTO		ref.BHI_prevalence_CPT
(	WITH				Aggregate	AS
						(	SELECT	COUNT( member_ID )	AS	member_count
							FROM		clean_raw.bhi_members
						)
				,	Claims		AS
						(	SELECT DISTINCT		CPT_Code
											,	member_ID
							FROM			(	SELECT		CPT_HCPCS_Code	AS	CPT_Code
														,	member_ID
												FROM		clean_raw.bhi_facility_claim_detail	)
									UNION	(	SELECT		CPT_HCPCS_Code	AS	CPT_Code
														,	member_ID
												FROM		clean_raw.bhi_Professional_Claims	)
						)
	SELECT			Claims.CPT_Code					AS	CPT_Code
				,	COUNT( Claims.member_ID )		AS	patients_With_CPT_Code_Count
				,	CONVERT( DOUBLE PRECISION, 1.0*COUNT( Claims.member_ID )/Aggregate.member_count )
													AS	CPT_Code_Prevalence_in_BHI
	FROM				Claims
				,	Aggregate
	GROUP BY			CPT_Code
				,	Aggregate.member_count
	ORDER BY		CPT_Code
);

--ANALYZE COMPRESSION	ref.BHI_prevalence_CPT;
ANALYZE					ref.BHI_prevalence_CPT;
VACUUM SORT ONLY			ref.BHI_prevalence_CPT;
ANALYZE					ref.BHI_prevalence_CPT;



/*
It is useful in subsequent queries to have a single column table containing only the straight-up ICD9 diagnosis codes from
the table of ICD9 diagnosis codes.
*/
DROP TABLE IF EXISTS		clean_raw.legit_ICD9_DX_Codes;
DROP TABLE IF EXISTS		ref.legit_ICD9_DX_Codes;
CREATE TABLE				ref.legit_ICD9_DX_Codes
(	ICD9_DX_Code		VARCHAR( 5 )		ENCODE	ZSTD		)
DISTKEY( ICD9_DX_Code )
COMPOUND SORTKEY( ICD9_DX_Code );



INSERT INTO				ref.legit_ICD9_DX_Codes
(	SELECT DISTINCT		ICD9_DX_Code		AS	ICD9_DX_Code
	FROM					ref.BHI_ICD9_DX_codes
	WHERE					ICD9_DX_Code					IS NOT	NULL
						AND	LEN( BTRIM( ICD9_DX_Code ) )		&gt;		0
	ORDER BY				ICD9_DX_Code
);

--ANALYZE COMPRESSION	ref.legit_ICD9_DX_Codes;
ANALYZE				ref.legit_ICD9_DX_Codes;
VACUUM SORT ONLY		ref.legit_ICD9_DX_Codes;
ANALYZE				ref.legit_ICD9_DX_Codes;



/*
OK, so this one is going to take some explanation.  I wanted to get an exhaustive list of ICD9 diagnosis codes as listed in the BHI claims data
along with the raw count of patients who have been issued the diagnosis code at some point in their history, such as we have it.  ICD9 diagnosis
codes appear in BHI claims data in BHI_Facility_Claim_Header (twelve possible columns) and BHI_Professional_Claims (four possible columns).  Member
IDs per (cleaned) ICD9 diagnosis code are gathered from each column;  then the column information is aggregated and the counts are calculated so
that the rows of the table contain all present ICD 10 diagnosis codes listed separately, together with a count of all patients who have been so
diagnosed at least once.
*/
DROP TABLE IF EXISTS		clean_raw.ICD9_DX_Codes_in_paid_BHI_Claims;
DROP TABLE IF EXISTS		ref.ICD9_DX_Codes_in_paid_BHI_Claims;
CREATE TABLE				ref.ICD9_DX_Codes_in_paid_BHI_Claims
(		ICD9_DX_Code					VARCHAR( 7 )		ENCODE	ZSTD
	,	count_Of_Patients_per_Code	INTEGER			ENCODE	ZSTD
)
DISTKEY( ICD9_DX_Code )
COMPOUND SORTKEY( ICD9_DX_Code );



INSERT INTO				ref.ICD9_DX_Codes_in_paid_BHI_Claims
(	SELECT DISTINCT
			DX_Code				AS	ICD9_DX_Code
		,	COUNT( member_ID )	AS	count_Of_Patients_per_Code
	FROM
		(		(	SELECT DISTINCT
							( REGEXP_REPLACE( header.admitting_ICD9_DX_Code, '[^A-Z0-9]+', '' ) )	AS	DX_Code
						,	header.member_ID															AS	member_ID
					FROM	
								clean_raw.BHI_Facility_Claim_Header		header
						JOIN		clean_raw.BHI_Facility_Claim_Detail		detail
						ON			header.claim_ID				=	detail.claim_ID
								AND	header.member_ID				=	detail.member_ID
					WHERE
							header.ICD_Code_Type					=		'1'
						AND	detail.claim_Payment_Status_Code		=		'P'
						AND	DX_Code								IS NOT	NULL
						AND	DX_Code								!=		''		)
			UNION
				(	SELECT DISTINCT
							( REGEXP_REPLACE( header.primary_ICD9_DX_Code, '[^A-Z0-9]+', '' ) )		AS	DX_Code
						,	header.member_ID															AS	member_ID
					FROM	
								clean_raw.BHI_Facility_Claim_Header		header
						JOIN		clean_raw.BHI_Facility_Claim_Detail		detail
						ON			header.claim_ID				=	detail.claim_ID
								AND	header.member_ID				=	detail.member_ID
					WHERE
							header.ICD_Code_Type					=		'1'
						AND	detail.claim_Payment_Status_Code		=		'P'
						AND	DX_Code								IS NOT	NULL
						AND	DX_Code								!=		''		)
			UNION
				(	SELECT DISTINCT
							( REGEXP_REPLACE( header.secondary_ICD9_DX_Code1, '[^A-Z0-9]+', '' ) )	AS	DX_Code
						,	header.member_ID															AS	member_ID
					FROM	
								clean_raw.BHI_Facility_Claim_Header		header
						JOIN		clean_raw.BHI_Facility_Claim_Detail		detail
						ON			header.claim_ID				=	detail.claim_ID
								AND	header.member_ID				=	detail.member_ID
					WHERE
							header.ICD_Code_Type					=		'1'
						AND	detail.claim_Payment_Status_Code		=		'P'
						AND	DX_Code								IS NOT	NULL
						AND	DX_Code								!=		''		)
			UNION
				(	SELECT DISTINCT
							( REGEXP_REPLACE( header.secondary_ICD9_DX_Code2, '[^A-Z0-9]+', '' ) )	AS	DX_Code
						,	header.member_ID															AS	member_ID
					FROM	
								clean_raw.BHI_Facility_Claim_Header		header
						JOIN		clean_raw.BHI_Facility_Claim_Detail		detail
						ON			header.claim_ID				=	detail.claim_ID
								AND	header.member_ID				=	detail.member_ID
					WHERE
							header.ICD_Code_Type					=		'1'
						AND	detail.claim_Payment_Status_Code		=		'P'
						AND	DX_Code								IS NOT	NULL
						AND	DX_Code								!=		''		)
			UNION
				(	SELECT DISTINCT
							( REGEXP_REPLACE( header.secondary_ICD9_DX_Code3, '[^A-Z0-9]+', '' ) )	AS	DX_Code
						,	header.member_ID															AS	member_ID
					FROM	
								clean_raw.BHI_Facility_Claim_Header		header
						JOIN		clean_raw.BHI_Facility_Claim_Detail		detail
						ON			header.claim_ID				=	detail.claim_ID
								AND	header.member_ID				=	detail.member_ID
					WHERE
							header.ICD_Code_Type					=		'1'
						AND	detail.claim_Payment_Status_Code		=		'P'
						AND	DX_Code								IS NOT	NULL
						AND	DX_Code								!=		''		)
			UNION
				(	SELECT DISTINCT
							( REGEXP_REPLACE( header.secondary_ICD9_DX_Code4, '[^A-Z0-9]+', '' ) )	AS	DX_Code
						,	header.member_ID															AS	member_ID
					FROM	
								clean_raw.BHI_Facility_Claim_Header		header
						JOIN		clean_raw.BHI_Facility_Claim_Detail		detail
						ON			header.claim_ID				=	detail.claim_ID
								AND	header.member_ID				=	detail.member_ID
					WHERE
							header.ICD_Code_Type					=		'1'
						AND	detail.claim_Payment_Status_Code		=		'P'
						AND	DX_Code								IS NOT	NULL
						AND	DX_Code								!=		''		)
			UNION
				(	SELECT DISTINCT
							( REGEXP_REPLACE( header.secondary_ICD9_DX_Code5, '[^A-Z0-9]+', '' ) )	AS	DX_Code
						,	header.member_ID															AS	member_ID
					FROM	
								clean_raw.BHI_Facility_Claim_Header		header
						JOIN		clean_raw.BHI_Facility_Claim_Detail		detail
						ON			header.claim_ID				=	detail.claim_ID
								AND	header.member_ID				=	detail.member_ID
					WHERE
							header.ICD_Code_Type					=		'1'
						AND	detail.claim_Payment_Status_Code		=		'P'
						AND	DX_Code								IS NOT	NULL
						AND	DX_Code								!=		''		)
			UNION
				(	SELECT DISTINCT
							( REGEXP_REPLACE( header.secondary_ICD9_DX_Code6, '[^A-Z0-9]+', '' ) )	AS	DX_Code
						,	header.member_ID															AS	member_ID
					FROM	
								clean_raw.BHI_Facility_Claim_Header		header
						JOIN		clean_raw.BHI_Facility_Claim_Detail		detail
						ON			header.claim_ID				=	detail.claim_ID
								AND	header.member_ID				=	detail.member_ID
					WHERE
							header.ICD_Code_Type					=		'1'
						AND	detail.claim_Payment_Status_Code		=		'P'
						AND	DX_Code								IS NOT	NULL
						AND	DX_Code								!=		''		)
			UNION
				(	SELECT DISTINCT
							( REGEXP_REPLACE( header.secondary_ICD9_DX_Code7, '[^A-Z0-9]+', '' ) )	AS	DX_Code
						,	header.member_ID															AS	member_ID
					FROM	
								clean_raw.BHI_Facility_Claim_Header		header
						JOIN		clean_raw.BHI_Facility_Claim_Detail		detail
						ON			header.claim_ID				=	detail.claim_ID
								AND	header.member_ID				=	detail.member_ID
					WHERE
							header.ICD_Code_Type					=		'1'
						AND	detail.claim_Payment_Status_Code		=		'P'
						AND	DX_Code								IS NOT	NULL
						AND	DX_Code								!=		''		)
			UNION
				(	SELECT DISTINCT
							( REGEXP_REPLACE( header.secondary_ICD9_DX_Code8, '[^A-Z0-9]+', '' ) )	AS	DX_Code
						,	header.member_ID															AS	member_ID
					FROM	
								clean_raw.BHI_Facility_Claim_Header		header
						JOIN		clean_raw.BHI_Facility_Claim_Detail		detail
						ON			header.claim_ID				=	detail.claim_ID
								AND	header.member_ID				=	detail.member_ID
					WHERE
							header.ICD_Code_Type					=		'1'
						AND	detail.claim_Payment_Status_Code		=		'P'
						AND	DX_Code								IS NOT	NULL
						AND	DX_Code								!=		''		)
			UNION
				(	SELECT DISTINCT
							( REGEXP_REPLACE( header.secondary_ICD9_DX_Code9, '[^A-Z0-9]+', '' ) )	AS	DX_Code
						,	header.member_ID															AS	member_ID
					FROM	
								clean_raw.BHI_Facility_Claim_Header		header
						JOIN		clean_raw.BHI_Facility_Claim_Detail		detail
						ON			header.claim_ID				=	detail.claim_ID
								AND	header.member_ID				=	detail.member_ID
					WHERE
							header.ICD_Code_Type					=		'1'
						AND	detail.claim_Payment_Status_Code		=		'P'
						AND	DX_Code								IS NOT	NULL
						AND	DX_Code								!=		''		)
			UNION
				(	SELECT DISTINCT
							( REGEXP_REPLACE( header.secondary_ICD9_DX_Code10, '[^A-Z0-9]+', '' ) )	AS	DX_Code
						,	header.member_ID															AS	member_ID
					FROM	
								clean_raw.BHI_Facility_Claim_Header		header
						JOIN		clean_raw.BHI_Facility_Claim_Detail		detail
						ON			header.claim_ID				=	detail.claim_ID
								AND	header.member_ID				=	detail.member_ID
					WHERE
							header.ICD_Code_Type					=		'1'
						AND	detail.claim_Payment_Status_Code		=		'P'
						AND	DX_Code								IS NOT	NULL
						AND	DX_Code								!=		''		)
			UNION
				(	SELECT DISTINCT
							( REGEXP_REPLACE( primary_ICD9_DX_Code, '[^A-Z0-9]+', '' ) )				AS	DX_Code
						,	member_ID																AS	member_ID
					FROM
						clean_raw.BHI_Professional_Claims
					WHERE
							ICD_Code_Type				=		'1'
						AND	claim_Payment_Status_Code	=		'P'
						AND	DX_Code						IS NOT	NULL
						AND	DX_Code						!=		''		)
			UNION
				(	SELECT DISTINCT
							( REGEXP_REPLACE( secondary_ICD9_DX_Code1, '[^A-Z0-9]+', '' ) )			AS	DX_Code
						,	member_ID																AS	member_ID
					FROM
						clean_raw.BHI_Professional_Claims
					WHERE
							ICD_Code_Type				=		'1'
						AND	claim_Payment_Status_Code	=		'P'
						AND	DX_Code						IS NOT	NULL
						AND	DX_Code						!=		''		)
			UNION
				(	SELECT DISTINCT
							( REGEXP_REPLACE( secondary_ICD9_DX_Code2, '[^A-Z0-9]+', '' ) )			AS	DX_Code
						,	member_ID																AS	member_ID
					FROM
						clean_raw.BHI_Professional_Claims
					WHERE
							ICD_Code_Type				=		'1'
						AND	claim_Payment_Status_Code	=		'P'
						AND	DX_Code						IS NOT	NULL
						AND	DX_Code						!=		''		)
			UNION
				(	SELECT DISTINCT
							( REGEXP_REPLACE( secondary_ICD9_DX_Code3, '[^A-Z0-9]+', '' ) )			AS	DX_Code
						,	member_ID																AS	member_ID
					FROM
						clean_raw.BHI_Professional_Claims
					WHERE
							ICD_Code_Type				=		'1'
						AND	claim_Payment_Status_Code	=		'P'
						AND	DX_Code						IS NOT	NULL
						AND	DX_Code						!=		''		)
		)	BIG_PILE_O_MEMBERS_N_CODES
	GROUP BY		BIG_PILE_O_MEMBERS_N_CODES.DX_Code
	ORDER BY		BIG_PILE_O_MEMBERS_N_CODES.DX_Code
);

--ANALYZE COMPRESSION	ref.ICD9_DX_Codes_in_paid_BHI_Claims;
ANALYZE				ref.ICD9_DX_Codes_in_paid_BHI_Claims;
VACUUM SORT ONLY		ref.ICD9_DX_Codes_in_paid_BHI_Claims;
ANALYZE				ref.ICD9_DX_Codes_in_paid_BHI_Claims;


/*
Here the prevalences are actually calculated and stored off in a table.  Included are the ICD9 diagnosis codes (in order), a count of patients who
have at least one claim in the data including the stated diagnosis, and a third column containing the proportion of all members which have received 
such diagnosis (or, equivalently, the probability that a randomly selected member has received said diagnosis at some point during coverage).
*/
DROP TABLE IF EXISTS		clean_raw.BHI_prevalence_ICD9_DX;
DROP TABLE IF EXISTS		ref.BHI_prevalence_ICD9_DX;
CREATE TABLE				ref.BHI_prevalence_ICD9_DX
(		ICD9_DX_Code							VARCHAR( 7 )			ENCODE	RAW
	,	patients_With_ICD9_DX_Code_Count		INTEGER				ENCODE	RAW
	,	ICD9_DX_Code_Prevalence_in_BHI		DOUBLE PRECISION		ENCODE	RAW
)
DISTKEY( ICD9_DX_Code )
COMPOUND SORTKEY( ICD9_DX_Code );



INSERT INTO		ref.BHI_prevalence_ICD9_DX
(	WITH			Aggregate	AS
					(	SELECT	COUNT( member_ID )		AS	member_count
						FROM		clean_raw.bhi_members						)
	SELECT			codes.ICD9_DX_Code					AS	this_ICD9_DX_Code
				,	codes.count_Of_Patients_per_Code		AS	patients_With_ICD9_DX_Code_Count
				,	CONVERT(		DOUBLE PRECISION, 1.0*codes.count_Of_Patients_per_Code/Aggregate.member_count	)
														AS	ICD9_DX_Code_Prevalence_in_BHI
	FROM				ref.ICD9_DX_Codes_in_paid_BHI_Claims	codes
				,	Aggregate
	WHERE		ICD9_DX_Code		=	ANY(		SELECT	ICD9_DX_Code
											FROM		ref.legit_ICD9_DX_Codes	)
	GROUP BY			this_ICD9_DX_Code
				,	patients_With_ICD9_DX_Code_Count
				,	Aggregate.member_count
	ORDER BY		this_ICD9_DX_Code
);

--ANALYZE COMPRESSION	ref.BHI_prevalence_ICD9_DX;
ANALYZE				ref.BHI_prevalence_ICD9_DX;
VACUUM SORT ONLY		ref.BHI_prevalence_ICD9_DX;
ANALYZE				ref.BHI_prevalence_ICD9_DX;


/*
It is useful in subsequent queries to have a single column table containing only the straight-up ICD10-CM codes from
the CDC table
*/
DROP TABLE IF EXISTS		clean_raw.legit_ICD10_DX_Codes;
DROP TABLE IF EXISTS		ref.legit_ICD10_DX_Codes;
CREATE TABLE				ref.legit_ICD10_DX_Codes
(	ICD10_DX_Code	VARCHAR( 7 )		ENCODE	ZSTD	)
DISTKEY( ICD10_DX_Code )
COMPOUND SORTKEY( ICD10_DX_Code );



INSERT INTO				ref.legit_ICD10_DX_Codes
(	SELECT DISTINCT		ICD10_DX_Code	AS	ICD10_DX_Code
	FROM					ref.BHI_ICD10_DX_Codes
	WHERE				ICD10_DX_Code						IS NOT	NULL
						AND	LEN( BTRIM( ICD10_DX_Code ) )	&gt;		0
	ORDER BY				ICD10_DX_Code
);

--ANALYZE COMPRESSION		ref.legit_ICD10_DX_Codes;
ANALYZE					ref.legit_ICD10_DX_Codes;
VACUUM SORT ONLY			ref.legit_ICD10_DX_Codes;
ANALYZE					ref.legit_ICD10_DX_Codes;


/*
OK, so this one is going to take some explanation.  I wanted to get an exhaustive list of ICD10 diagnosis codes as listed in the BHI claims data
along with the raw count of patients who have been issued the diagnosis code at some point in their history, such as we have it.  ICD10 diagnosis codes
appear in BHI claims data in BHI_Facility_Claim_Header (twelve possible columns) and BHI_Professional_Claims (four possible columns).  Member IDs per
(cleaned) ICD10 diagnosis code are gathered from each column;  then the column information is aggregated and the counts are calculated so
that the rows of the table contain all present ICD 10 diagnosis codes listed separately, together with a count of all patients who have been so
diagnosed at least once.
*/
DROP TABLE IF EXISTS		clean_raw.ICD10_DX_Codes_in_paid_BHI_Claims;
DROP TABLE IF EXISTS		ref.ICD10_DX_Codes_in_paid_BHI_Claims;
CREATE TABLE				ref.ICD10_DX_Codes_in_paid_BHI_Claims
(		ICD10_DX_Code				VARCHAR( 7 )		ENCODE	ZSTD
	,	count_Of_Patients_per_Code	INTEGER			ENCODE	ZSTD
)
DISTKEY( ICD10_DX_Code )
COMPOUND SORTKEY( ICD10_DX_Code );



INSERT INTO				ref.ICD10_DX_Codes_in_paid_BHI_Claims
(	SELECT DISTINCT
			DX_Code				AS	ICD10_DX_Code
		,	COUNT( member_ID )	AS	count_Of_Patients_per_Code
	FROM
		(		(	SELECT DISTINCT
						(		REGEXP_REPLACE( header.admitting_ICD10_DX_Code, '[^A-Z0-9]+', '' ) )		AS	DX_Code
							,	header.member_ID															AS	member_ID
					FROM
								clean_raw.BHI_Facility_Claim_Header		header
						JOIN		clean_raw.BHI_Facility_Claim_Detail		detail
						ON		header.claim_ID		=	detail.claim_ID
							AND	header.member_ID		=	detail.member_ID
					WHERE
							header.ICD_Code_Type					=		'2'
						AND	detail.claim_Payment_Status_Code		=		'P'
						AND	DX_Code								IS NOT	NULL
						AND	DX_Code								!=		''		)
			UNION
				(	SELECT DISTINCT
						(		REGEXP_REPLACE( header.primary_ICD10_DX_Code, '[^A-Z0-9]+', '' ) )		AS	DX_Code
							,	header.member_ID															AS	member_ID
					FROM
								clean_raw.BHI_Facility_Claim_Header		header
						JOIN		clean_raw.BHI_Facility_Claim_Detail		detail
						ON		header.claim_ID		=	detail.claim_ID
							AND	header.member_ID		=	detail.member_ID
					WHERE
							header.ICD_Code_Type					=		'2'
						AND	detail.claim_Payment_Status_Code		=		'P'
						AND	DX_Code								IS NOT	NULL
						AND	DX_Code								!=		''		)
			UNION
				(	SELECT DISTINCT
						(		REGEXP_REPLACE( header.secondary_ICD10_DX_Code1, '[^A-Z0-9]+', '' ) )	AS	DX_Code
							,	header.member_ID															AS	member_ID
					FROM
								clean_raw.BHI_Facility_Claim_Header		header
						JOIN		clean_raw.BHI_Facility_Claim_Detail		detail
						ON		header.claim_ID		=	detail.claim_ID
							AND	header.member_ID		=	detail.member_ID
					WHERE
							header.ICD_Code_Type					=		'2'
						AND	detail.claim_Payment_Status_Code		=		'P'
						AND	DX_Code								IS NOT	NULL
						AND	DX_Code								!=		''		)
			UNION
				(	SELECT DISTINCT
						(		REGEXP_REPLACE( header.secondary_ICD10_DX_Code2, '[^A-Z0-9]+', '' ) )	AS	DX_Code
							,	header.member_ID															AS	member_ID
					FROM
								clean_raw.BHI_Facility_Claim_Header		header
						JOIN		clean_raw.BHI_Facility_Claim_Detail		detail
						ON		header.claim_ID		=	detail.claim_ID
							AND	header.member_ID		=	detail.member_ID
					WHERE
							header.ICD_Code_Type					=		'2'
						AND	detail.claim_Payment_Status_Code		=		'P'
						AND	DX_Code								IS NOT	NULL
						AND	DX_Code								!=		''		)
			UNION
				(	SELECT DISTINCT
						(		REGEXP_REPLACE( header.secondary_ICD10_DX_Code3, '[^A-Z0-9]+', '' ) )	AS	DX_Code
							,	header.member_ID															AS	member_ID
					FROM
								clean_raw.BHI_Facility_Claim_Header		header
						JOIN		clean_raw.BHI_Facility_Claim_Detail		detail
						ON		header.claim_ID		=	detail.claim_ID
							AND	header.member_ID		=	detail.member_ID
					WHERE
							header.ICD_Code_Type					=		'2'
						AND	detail.claim_Payment_Status_Code		=		'P'
						AND	DX_Code								IS NOT	NULL
						AND	DX_Code								!=		''		)
			UNION
				(	SELECT DISTINCT
						(		REGEXP_REPLACE( header.secondary_ICD10_DX_Code4, '[^A-Z0-9]+', '' ) )	AS	DX_Code
							,	header.member_ID															AS	member_ID
					FROM
								clean_raw.BHI_Facility_Claim_Header		header
						JOIN		clean_raw.BHI_Facility_Claim_Detail		detail
						ON		header.claim_ID		=	detail.claim_ID
							AND	header.member_ID		=	detail.member_ID
					WHERE
							header.ICD_Code_Type					=		'2'
						AND	detail.claim_Payment_Status_Code		=		'P'
						AND	DX_Code								IS NOT	NULL
						AND	DX_Code								!=		''		)
			UNION
				(	SELECT DISTINCT
						(		REGEXP_REPLACE( header.secondary_ICD10_DX_Code5, '[^A-Z0-9]+', '' ) )	AS	DX_Code
							,	header.member_ID															AS	member_ID
					FROM
								clean_raw.BHI_Facility_Claim_Header		header
						JOIN		clean_raw.BHI_Facility_Claim_Detail		detail
						ON		header.claim_ID		=	detail.claim_ID
							AND	header.member_ID	=	detail.member_ID
					WHERE
							header.ICD_Code_Type					=		'2'
						AND	detail.claim_Payment_Status_Code		=		'P'
						AND	DX_Code								IS NOT	NULL
						AND	DX_Code								!=		''		)
			UNION
				(	SELECT DISTINCT
						(		REGEXP_REPLACE( header.secondary_ICD10_DX_Code6, '[^A-Z0-9]+', '' ) )	AS	DX_Code
							,	header.member_ID															AS	member_ID
					FROM
								clean_raw.BHI_Facility_Claim_Header		header
						JOIN		clean_raw.BHI_Facility_Claim_Detail		detail
						ON		header.claim_ID		=	detail.claim_ID
							AND	header.member_ID		=	detail.member_ID
					WHERE
							header.ICD_Code_Type					=		'2'
						AND	detail.claim_Payment_Status_Code		=		'P'
						AND	DX_Code								IS NOT	NULL
						AND	DX_Code								!=		''		)
			UNION
				(	SELECT DISTINCT
						(		REGEXP_REPLACE( header.secondary_ICD10_DX_Code7, '[^A-Z0-9]+', '' ) )	AS	DX_Code
							,	header.member_ID															AS	member_ID
					FROM
								clean_raw.BHI_Facility_Claim_Header		header
						JOIN		clean_raw.BHI_Facility_Claim_Detail		detail
						ON		header.claim_ID		=	detail.claim_ID
							AND	header.member_ID		=	detail.member_ID
					WHERE
							header.ICD_Code_Type					=		'2'
						AND	detail.claim_Payment_Status_Code		=		'P'
						AND	DX_Code								IS NOT	NULL
						AND	DX_Code								!=		''		)
			UNION
				(	SELECT DISTINCT
						(		REGEXP_REPLACE( header.secondary_ICD10_DX_Code8, '[^A-Z0-9]+', '' ) )	AS	DX_Code
							,	header.member_ID															AS	member_ID
					FROM
								clean_raw.BHI_Facility_Claim_Header		header
						JOIN		clean_raw.BHI_Facility_Claim_Detail		detail
						ON		header.claim_ID		=	detail.claim_ID
							AND	header.member_ID		=	detail.member_ID
					WHERE
							header.ICD_Code_Type					=		'2'
						AND	detail.claim_Payment_Status_Code		=		'P'
						AND	DX_Code								IS NOT	NULL
						AND	DX_Code								!=		''		)
			UNION
				(	SELECT DISTINCT
						(		REGEXP_REPLACE( header.secondary_ICD10_DX_Code9, '[^A-Z0-9]+', '' ) )	AS	DX_Code
							,	header.member_ID															AS	member_ID
					FROM
								clean_raw.BHI_Facility_Claim_Header		header
						JOIN		clean_raw.BHI_Facility_Claim_Detail		detail
						ON		header.claim_ID		=	detail.claim_ID
							AND	header.member_ID		=	detail.member_ID
					WHERE
							header.ICD_Code_Type					=		'2'
						AND	detail.claim_Payment_Status_Code		=		'P'
						AND	DX_Code								IS NOT	NULL
						AND	DX_Code								!=		''		)
			UNION
				(	SELECT DISTINCT
						(		REGEXP_REPLACE( header.secondary_ICD10_DX_Code10, '[^A-Z0-9]+', '' ) )	AS	DX_Code
							,	header.member_ID															AS	member_ID
					FROM
								clean_raw.BHI_Facility_Claim_Header		header
						JOIN		clean_raw.BHI_Facility_Claim_Detail		detail
						ON		header.claim_ID		=	detail.claim_ID
							AND	header.member_ID		=	detail.member_ID
					WHERE
							header.ICD_Code_Type					=		'2'
						AND	detail.claim_Payment_Status_Code		=		'P'
						AND	DX_Code								IS NOT	NULL
						AND	DX_Code								!=		''		)
			UNION
				(	SELECT DISTINCT
						(		REGEXP_REPLACE( pro.primary_ICD10_DX_Code, '[^A-Z0-9]+', '' ) )			AS	DX_Code
							,	pro.member_ID															AS	member_ID
					FROM
						clean_raw.BHI_Professional_Claims		pro
					WHERE
							pro.ICD_Code_Type					=		'2'
						AND	pro.claim_Payment_Status_Code		=		'P'
						AND	DX_Code								IS NOT	NULL
						AND	DX_Code								!=		''		)
			UNION
				(	SELECT DISTINCT
						(		REGEXP_REPLACE( pro.secondary_ICD10_DX_Code1, '[^A-Z0-9]+', '' ) )		AS	DX_Code
							,	pro.member_ID															AS	member_ID
					FROM
						clean_raw.BHI_Professional_Claims		pro
					WHERE
							pro.ICD_Code_Type					=		'2'
						AND	pro.claim_Payment_Status_Code		=		'P'
						AND	DX_Code								IS NOT	NULL
						AND	DX_Code								!=		''		)
			UNION
				(	SELECT DISTINCT
						(		REGEXP_REPLACE( pro.secondary_ICD10_DX_Code2, '[^A-Z0-9]+', '' ) )		AS	DX_Code
							,	pro.member_ID															AS	member_ID
					FROM
						clean_raw.BHI_Professional_Claims		pro
					WHERE
							pro.ICD_Code_Type					=		'2'
						AND	pro.claim_Payment_Status_Code		=		'P'
						AND	DX_Code								IS NOT	NULL
						AND	DX_Code								!=		''		)
			UNION
				(	SELECT DISTINCT
						(		REGEXP_REPLACE( pro.secondary_ICD10_DX_Code3, '[^A-Z0-9]+', '' ) )		AS	DX_Code
							,	pro.member_ID															AS	member_ID
					FROM
						clean_raw.BHI_Professional_Claims		pro
					WHERE
							pro.ICD_Code_Type					=		'2'
						AND	pro.claim_Payment_Status_Code		=		'P'
						AND	DX_Code								IS NOT	NULL
						AND	DX_Code								!=		''		)
		)	BIG_PILE_O_MEMBERS_N_CODES
	GROUP BY		BIG_PILE_O_MEMBERS_N_CODES.DX_Code
	ORDER BY		BIG_PILE_O_MEMBERS_N_CODES.DX_Code
);

--ANALYZE COMPRESSION	ref.ICD10_DX_Codes_in_paid_BHI_Claims;
ANALYZE					ref.ICD10_DX_Codes_in_paid_BHI_Claims;
VACUUM SORT ONLY			ref.ICD10_DX_Codes_in_paid_BHI_Claims;
ANALYZE					ref.ICD10_DX_Codes_in_paid_BHI_Claims;


/*
Here the prevalences are actually calculated and stored off in a table.  Included are the ICD10 diagnosis codes (in order), a count of patients who
have at least one claim in the data including the stated diagnosis, and a third column containing the proportion of all members which have received 
such diagnosis (or, equivalently, the probability that a randomly selected member has received said diagnosis at some point during coverage).
*/
DROP TABLE IF EXISTS		clean_raw.BHI_prevalence_ICD10_DX;
DROP TABLE IF EXISTS		ref.BHI_prevalence_ICD10_DX;
CREATE TABLE				ref.BHI_prevalence_ICD10_DX
(		ICD10_DX_Code						VARCHAR( 7 )			ENCODE	RAW
	,	patients_With_ICD10_DX_Code_Count	INTEGER				ENCODE	RAW
	,	ICD10_DX_Code_Prevalence_in_BHI		DOUBLE PRECISION		ENCODE	RAW
)
DISTKEY( ICD10_DX_Code )
COMPOUND SORTKEY( ICD10_DX_Code );



INSERT INTO		ref.BHI_prevalence_ICD10_DX
(	WITH			Aggregate	AS
					(	SELECT	COUNT( member_ID )	AS	member_count
						FROM		clean_raw.BHI_members
					)
	SELECT			Claims.ICD10_DX_Code					AS	this_ICD10_DX_Code
				,	Claims.count_Of_Patients_per_Code	AS	patients_With_ICD10_DX_Code_Count
				,	CONVERT( DOUBLE PRECISION, 1.0*Claims.count_Of_Patients_per_Code/Aggregate.member_count )
														AS	ICD10_DX_Code_Prevalence_in_BHI
	FROM				ref.ICD10_DX_Codes_in_paid_BHI_Claims 		Claims
				,	Aggregate
	WHERE		Claims.ICD10_DX_Code		=	ANY(		SELECT	ICD10_DX_Code
													FROM		ref.legit_ICD10_DX_Codes	)
	GROUP BY			this_ICD10_DX_Code
				,	patients_With_ICD10_DX_Code_Count
				,	Aggregate.member_count
	ORDER BY		this_ICD10_DX_Code
);

--ANALYZE COMPRESSION	ref.BHI_prevalence_ICD10_DX;
ANALYZE					ref.BHI_prevalence_ICD10_DX;
VACUUM SORT ONLY			ref.BHI_prevalence_ICD10_DX;
ANALYZE					ref.BHI_prevalence_ICD10_DX;


</SQL>
    <Name>BHI prevalence</Name>
  </Query>
  <Query IsView="False" IsSP="False">
    <SQL>


DROP TABLE IF EXISTS	ref.BHI_reference_admit_source;
CREATE TABLE			ref.BHI_reference_admit_source
(		code			VARCHAR(  2 )	ENCODE	RAW
	,	description		VARCHAR( 50 )	ENCODE	RAW
)	/*	create			ref.BHI_reference_admit_source	*/
COMPOUND SORTKEY( code );



COPY		ref.BHI_reference_admit_source
FROM		's3://dhp-rndlab-bhi-data/unzipped/reference_admit_source.dat'
credentials 'aws_iam_role=arn:aws:iam::722648170004:role/Data_Wranglers'
ACCEPTANYDATE ACCEPTINVCHARS '^' BLANKSASNULL EMPTYASNULL NULL AS 'NULL' IGNOREBLANKLINES DATEFORMAT 'auto'
IGNOREHEADER 1 TRIMBLANKS DELIMITER '|' STATUPDATE ON MAXERROR 0 COMPUPDATE ON;

--ANALYZE COMPRESSION		ref.BHI_reference_admit_source;
ANALYZE					ref.BHI_reference_admit_source;
VACUUM SORT ONLY		ref.BHI_reference_admit_source;
ANALYZE					ref.BHI_reference_admit_source;



DROP TABLE IF EXISTS	ref.BHI_reference_admit_type;
CREATE TABLE			ref.BHI_reference_admit_type
(		code			VARCHAR(  2 )	ENCODE	RAW
	,	description		VARCHAR( 26 )	ENCODE	RAW
)	/*	create			ref.BHI_reference_admit_type	*/
COMPOUND SORTKEY( code );



COPY		ref.BHI_reference_admit_type
FROM		's3://dhp-rndlab-bhi-data/unzipped/reference_admit_type.dat'
credentials 'aws_iam_role=arn:aws:iam::722648170004:role/Data_Wranglers'
ACCEPTANYDATE ACCEPTINVCHARS '^' BLANKSASNULL EMPTYASNULL NULL AS 'NULL' IGNOREBLANKLINES DATEFORMAT 'auto'
IGNOREHEADER 1 TRIMBLANKS DELIMITER '|' STATUPDATE ON MAXERROR 0 COMPUPDATE ON;

--ANALYZE COMPRESSION		ref.BHI_reference_admit_type;
ANALYZE					ref.BHI_reference_admit_type;
VACUUM SORT ONLY		ref.BHI_reference_admit_type;
ANALYZE					ref.BHI_reference_admit_type;



DROP TABLE IF EXISTS	ref.BHI_reference_benefit_payment_status;
CREATE TABLE			ref.BHI_reference_benefit_payment_status
(		code			VARCHAR(  1 )	--ENCODE	RAW
	,	description		VARCHAR( 18 )	--ENCODE	RAW
)	/*	create			ref.BHI_reference_benefit_payment_status	*/
COMPOUND SORTKEY( code );



COPY		ref.BHI_reference_benefit_payment_status
FROM		's3://dhp-rndlab-bhi-data/unzipped/reference_benefit_payment_status.dat'
credentials 'aws_iam_role=arn:aws:iam::722648170004:role/Data_Wranglers'
ACCEPTANYDATE ACCEPTINVCHARS '^' BLANKSASNULL EMPTYASNULL NULL AS 'NULL' IGNOREBLANKLINES DATEFORMAT 'auto'
IGNOREHEADER 1 TRIMBLANKS DELIMITER '|' STATUPDATE ON MAXERROR 0 COMPUPDATE ON;

--ANALYZE COMPRESSION		ref.BHI_reference_benefit_payment_status;
ANALYZE					ref.BHI_reference_benefit_payment_status;
VACUUM SORT ONLY		ref.BHI_reference_benefit_payment_status;
ANALYZE					ref.BHI_reference_benefit_payment_status;



DROP TABLE IF EXISTS	ref.BHI_reference_claim_type;
CREATE TABLE			ref.BHI_reference_claim_type
(		code			VARCHAR(  2 )	--ENCODE	RAW
	,	description		VARCHAR( 20 )	--ENCODE	RAW
)	/*	create			ref.BHI_reference_claim_type	*/
COMPOUND SORTKEY( code );



COPY		ref.BHI_reference_claim_type
FROM		's3://dhp-rndlab-bhi-data/unzipped/reference_claim_type.dat'
credentials 'aws_iam_role=arn:aws:iam::722648170004:role/Data_Wranglers'
ACCEPTANYDATE ACCEPTINVCHARS '^' BLANKSASNULL EMPTYASNULL NULL AS 'NULL' IGNOREBLANKLINES DATEFORMAT 'auto'
IGNOREHEADER 1 TRIMBLANKS DELIMITER '|' STATUPDATE ON MAXERROR 0 COMPUPDATE ON;

--ANALYZE COMPRESSION		ref.BHI_reference_claim_type;
ANALYZE					ref.BHI_reference_claim_type;
VACUUM SORT ONLY		ref.BHI_reference_claim_type;
ANALYZE					ref.BHI_reference_claim_type;



DROP TABLE IF EXISTS	ref.BHI_reference_discharge_status;
CREATE TABLE			ref.BHI_reference_discharge_status
(		code			VARCHAR(  2 )	--ENCODE	RAW
	,	description		VARCHAR( 80 )	--ENCODE	RAW
)	/*	create			ref.BHI_reference_discharge_status	*/
COMPOUND SORTKEY( code );



COPY		ref.BHI_reference_discharge_status
FROM		's3://dhp-rndlab-bhi-data/unzipped/reference_discharge_status.dat'
credentials 'aws_iam_role=arn:aws:iam::722648170004:role/Data_Wranglers'
ACCEPTANYDATE ACCEPTINVCHARS '^' BLANKSASNULL EMPTYASNULL NULL AS 'NULL' IGNOREBLANKLINES DATEFORMAT 'auto'
IGNOREHEADER 1 TRIMBLANKS DELIMITER '|' STATUPDATE ON MAXERROR 0 COMPUPDATE ON;

--ANALYZE COMPRESSION		ref.BHI_reference_discharge_status;
ANALYZE					ref.BHI_reference_discharge_status;
VACUUM SORT ONLY		ref.BHI_reference_discharge_status;
ANALYZE					ref.BHI_reference_discharge_status;



DROP TABLE IF EXISTS	ref.BHI_reference_dispensing_status;
CREATE TABLE			ref.BHI_reference_dispensing_status
(		code			VARCHAR(  2 )	--ENCODE	RAW
	,	description		VARCHAR( 26 )	--ENCODE	RAW
)	/*	create			ref.BHI_reference_dispensing_status	*/
COMPOUND SORTKEY( code );



COPY		ref.BHI_reference_dispensing_status
FROM		's3://dhp-rndlab-bhi-data/unzipped/reference_dispensing_status.dat'
credentials 'aws_iam_role=arn:aws:iam::722648170004:role/Data_Wranglers'
ACCEPTANYDATE ACCEPTINVCHARS '^' BLANKSASNULL EMPTYASNULL NULL AS 'NULL' IGNOREBLANKLINES DATEFORMAT 'auto'
IGNOREHEADER 1 TRIMBLANKS DELIMITER '|' STATUPDATE ON MAXERROR 0 COMPUPDATE ON;

--ANALYZE COMPRESSION		ref.BHI_reference_dispensing_status;
ANALYZE					ref.BHI_reference_dispensing_status;
VACUUM SORT ONLY		ref.BHI_reference_dispensing_status;
ANALYZE					ref.BHI_reference_dispensing_status;



DROP TABLE IF EXISTS	ref.BHI_reference_noncovered_reason;
CREATE TABLE			ref.BHI_reference_noncovered_reason
(		code			VARCHAR(  2 )	--ENCODE	RAW
	,	description		VARCHAR( 48 )	--ENCODE	RAW
)	/*	create			ref.BHI_reference_noncovered_reason	*/
COMPOUND SORTKEY( code );



COPY		ref.BHI_reference_noncovered_reason
FROM		's3://dhp-rndlab-bhi-data/unzipped/reference_noncovered_reason.dat'
credentials 'aws_iam_role=arn:aws:iam::722648170004:role/Data_Wranglers'
ACCEPTANYDATE ACCEPTINVCHARS '^' BLANKSASNULL EMPTYASNULL NULL AS 'NULL' IGNOREBLANKLINES DATEFORMAT 'auto'
IGNOREHEADER 1 TRIMBLANKS DELIMITER '|' STATUPDATE ON MAXERROR 0 COMPUPDATE ON;

--ANALYZE COMPRESSION		ref.BHI_reference_noncovered_reason;
ANALYZE					ref.BHI_reference_noncovered_reason;
VACUUM SORT ONLY		ref.BHI_reference_noncovered_reason;
ANALYZE					ref.BHI_reference_noncovered_reason;



DROP TABLE IF EXISTS	ref.BHI_reference_place_of_service;
CREATE TABLE			ref.BHI_reference_place_of_service
(		code			VARCHAR(  2 )	--ENCODE	RAW
	,	description		VARCHAR( 70 )	--ENCODE	RAW
)	/*	create			ref.BHI_reference_place_of_service	*/
COMPOUND SORTKEY( code );



COPY		ref.BHI_reference_place_of_service
FROM		's3://dhp-rndlab-bhi-data/unzipped/reference_place_of_service.dat'
credentials 'aws_iam_role=arn:aws:iam::722648170004:role/Data_Wranglers'
ACCEPTANYDATE ACCEPTINVCHARS '^' BLANKSASNULL EMPTYASNULL NULL AS 'NULL' IGNOREBLANKLINES DATEFORMAT 'auto'
IGNOREHEADER 1 TRIMBLANKS DELIMITER '|' STATUPDATE ON MAXERROR 0 COMPUPDATE ON;

--ANALYZE COMPRESSION		ref.BHI_reference_place_of_service;
ANALYZE					ref.BHI_reference_place_of_service;
VACUUM SORT ONLY		ref.BHI_reference_place_of_service;
ANALYZE					ref.BHI_reference_place_of_service;



DROP TABLE IF EXISTS	ref.BHI_reference_product;
CREATE TABLE			ref.BHI_reference_product
(		code			VARCHAR(  4 )	--ENCODE	RAW
	,	description		VARCHAR( 32 )	--ENCODE	RAW
)	/*	create			ref.BHI_reference_product	*/
COMPOUND SORTKEY( code );



COPY		ref.BHI_reference_product
FROM		's3://dhp-rndlab-bhi-data/unzipped/reference_product.dat'
credentials 'aws_iam_role=arn:aws:iam::722648170004:role/Data_Wranglers'
ACCEPTANYDATE ACCEPTINVCHARS '^' BLANKSASNULL EMPTYASNULL NULL AS 'NULL' IGNOREBLANKLINES DATEFORMAT 'auto'
IGNOREHEADER 1 TRIMBLANKS DELIMITER '|' STATUPDATE ON MAXERROR 0 COMPUPDATE ON;

--ANALYZE COMPRESSION		ref.BHI_reference_product;
ANALYZE					ref.BHI_reference_product;
VACUUM SORT ONLY		ref.BHI_reference_product;
ANALYZE					ref.BHI_reference_product;



DROP TABLE IF EXISTS	ref.BHI_reference_provider_specialty;
CREATE TABLE			ref.BHI_reference_provider_specialty
(		code			VARCHAR(  2 )	--ENCODE	RAW
	,	description		VARCHAR( 45 )	--ENCODE	RAW
)	/*	create			ref.BHI_reference_provider_specialty	*/
COMPOUND SORTKEY( code );



COPY		ref.BHI_reference_provider_specialty
FROM		's3://dhp-rndlab-bhi-data/unzipped/reference_provider_specialty.dat'
credentials 'aws_iam_role=arn:aws:iam::722648170004:role/Data_Wranglers'
ACCEPTANYDATE ACCEPTINVCHARS '^' BLANKSASNULL EMPTYASNULL NULL AS 'NULL' IGNOREBLANKLINES DATEFORMAT 'auto'
IGNOREHEADER 1 TRIMBLANKS DELIMITER '|' STATUPDATE ON MAXERROR 0 COMPUPDATE ON;

--ANALYZE COMPRESSION		ref.BHI_reference_provider_specialty;
ANALYZE					ref.BHI_reference_provider_specialty;
VACUUM SORT ONLY		ref.BHI_reference_provider_specialty;
ANALYZE					ref.BHI_reference_provider_specialty;



DROP TABLE IF EXISTS	ref.BHI_reference_provider_type;
CREATE TABLE			ref.BHI_reference_provider_type
(		code			VARCHAR(  2 )	--ENCODE	RAW
	,	description		VARCHAR( 30 )	--ENCODE	RAW
)	/*	create			ref.BHI_reference_provider_type	*/
COMPOUND SORTKEY( code );



COPY		ref.BHI_reference_provider_type
FROM		's3://dhp-rndlab-bhi-data/unzipped/reference_provider_type.dat'
credentials 'aws_iam_role=arn:aws:iam::722648170004:role/Data_Wranglers'
ACCEPTANYDATE ACCEPTINVCHARS '^' BLANKSASNULL EMPTYASNULL NULL AS 'NULL' IGNOREBLANKLINES DATEFORMAT 'auto'
IGNOREHEADER 1 TRIMBLANKS DELIMITER '|' STATUPDATE ON MAXERROR 0 COMPUPDATE ON;

--ANALYZE COMPRESSION		ref.BHI_reference_provider_type;
ANALYZE					ref.BHI_reference_provider_type;
VACUUM SORT ONLY		ref.BHI_reference_provider_type;
ANALYZE					ref.BHI_reference_provider_type;



DROP TABLE IF EXISTS	ref.BHI_reference_reimbursement_type;
CREATE TABLE			ref.BHI_reference_reimbursement_type
(		code			VARCHAR(  5 )	--ENCODE	RAW
	,	description		VARCHAR( 35 )	--ENCODE	RAW
)	/*	create			ref.BHI_reference_reimbursement_type	*/
COMPOUND SORTKEY( code );



COPY		ref.BHI_reference_reimbursement_type
FROM		's3://dhp-rndlab-bhi-data/unzipped/reference_reimbursement_type.dat'
credentials 'aws_iam_role=arn:aws:iam::722648170004:role/Data_Wranglers'
ACCEPTANYDATE ACCEPTINVCHARS '^' BLANKSASNULL EMPTYASNULL NULL AS 'NULL' IGNOREBLANKLINES DATEFORMAT 'auto'
IGNOREHEADER 1 TRIMBLANKS DELIMITER '|' STATUPDATE ON MAXERROR 0 COMPUPDATE ON;

--ANALYZE COMPRESSION		ref.BHI_reference_reimbursement_type;
ANALYZE					ref.BHI_reference_reimbursement_type;
VACUUM SORT ONLY		ref.BHI_reference_reimbursement_type;
ANALYZE					ref.BHI_reference_reimbursement_type;



DROP TABLE IF EXISTS	ref.BHI_reference_type_of_bill;
CREATE TABLE			ref.BHI_reference_type_of_bill
(		code			VARCHAR(  3 )	--ENCODE	RAW
	,	description		VARCHAR( 50 )	--ENCODE	RAW
)	/*	create			ref.BHI_reference_type_of_bill	*/
COMPOUND SORTKEY( code );



COPY		ref.BHI_reference_type_of_bill
FROM		's3://dhp-rndlab-bhi-data/unzipped/reference_type_of_bill.dat'
credentials 'aws_iam_role=arn:aws:iam::722648170004:role/Data_Wranglers'
ACCEPTANYDATE ACCEPTINVCHARS '^' BLANKSASNULL EMPTYASNULL NULL AS 'NULL' IGNOREBLANKLINES DATEFORMAT 'auto'
IGNOREHEADER 1 TRIMBLANKS DELIMITER '|' STATUPDATE ON MAXERROR 0 COMPUPDATE ON;

--ANALYZE COMPRESSION		ref.BHI_reference_type_of_bill;
ANALYZE					ref.BHI_reference_type_of_bill;
VACUUM SORT ONLY		ref.BHI_reference_type_of_bill;
ANALYZE					ref.BHI_reference_type_of_bill;



DROP TABLE IF EXISTS	ref.BHI_reference_type_of_service;
CREATE TABLE			ref.BHI_reference_type_of_service
(		code			VARCHAR(  5 )	--ENCODE	RAW
	,	description		VARCHAR( 35 )	--ENCODE	RAW
)	/*	create			ref.BHI_reference_type_of_service	*/
COMPOUND SORTKEY( code );



COPY		ref.BHI_reference_type_of_service
FROM		's3://dhp-rndlab-bhi-data/unzipped/reference_type_of_service.dat'
credentials 'aws_iam_role=arn:aws:iam::722648170004:role/Data_Wranglers'
ACCEPTANYDATE ACCEPTINVCHARS '^' BLANKSASNULL EMPTYASNULL NULL AS 'NULL' IGNOREBLANKLINES DATEFORMAT 'auto'
IGNOREHEADER 1 TRIMBLANKS DELIMITER '|' STATUPDATE ON MAXERROR 0 COMPUPDATE ON;

--ANALYZE COMPRESSION		ref.BHI_reference_type_of_service;
ANALYZE					ref.BHI_reference_type_of_service;
VACUUM SORT ONLY		ref.BHI_reference_type_of_service;
ANALYZE					ref.BHI_reference_type_of_service;



</SQL>
    <Name>Reference tables</Name>
  </Query>
  <Query IsView="False" IsSP="False">
    <SQL>DROP TABLE IF EXISTS	clean_raw.BHI_members;
CREATE TABLE 			clean_raw.BHI_members
(		member_ID	VARCHAR( 9 )	ENCODE	ZSTD
	,	birth_Year	INTEGER			ENCODE	DELTA
	,	gender		VARCHAR( 1 )	ENCODE	ZSTD
)	/*	CREATE			clean_raw.BHI_members		*/
DISTSTYLE KEY
DISTKEY( member_ID )
COMPOUND SORTKEY( member_ID, birth_Year, gender );



INSERT INTO		clean_raw.BHI_members
(	SELECT
			( member_id )		::	VARCHAR( 9 ) 	AS	member_ID
		,	( birth_year )		::	INTEGER			AS	birth_Year
		,	( gender )			::	VARCHAR( 1 )	AS	gender
	FROM
		cust_abs_raw.bhi_members
);	/*	POPULATE		clean_raw.BHI_members	*/



ANALYZE COMPRESSION		clean_raw.BHI_members;
ANALYZE					clean_raw.BHI_members;
VACUUM SORT ONLY		clean_raw.BHI_members;
ANALYZE					clean_raw.BHI_members;



DROP TABLE IF EXISTS	clean_raw.BHI_member_enrollment;
CREATE TABLE 			clean_raw.BHI_member_enrollment
(		enrollment_ID			VARCHAR( 10 )	ENCODE	LZO
	,	member_ID				VARCHAR(  9 )	ENCODE	LZO
	,	enrollment_Start_Date	DATE			ENCODE	LZO
	,	enrollment_Term_Date	DATE			ENCODE	LZO
	,	zip3_Code				VARCHAR(  3 )	ENCODE	LZO
	,	rx_Benefit_Indicator	VARCHAR(  1 )	ENCODE	LZO
)	/*	CREATE			clean_raw.BHI_member_enrollment		*/
DISTSTYLE KEY
DISTKEY( member_ID )
COMPOUND SORTKEY( member_ID, enrollment_Start_Date, enrollment_Term_Date );


/*
COPY		whaight.BHI_member_enrollment
FROM		's3://dhp-rndlab-bhi-data/unzipped/member_enrollment.dat'
credentials 'aws_iam_role=arn:aws:iam::722648170004:role/Data_Wranglers'
ACCEPTANYDATE ACCEPTINVCHARS '^' BLANKSASNULL EMPTYASNULL NULL AS 'NULL' IGNOREBLANKLINES DATEFORMAT 'auto'
IGNOREHEADER 1 TRIMBLANKS DELIMITER '|' STATUPDATE ON MAXERROR 0 COMPUPDATE ON;
*/



INSERT INTO			clean_raw.BHI_member_enrollment
(	SELECT
			( enrollment_id )			::	VARCHAR( 9 )	AS	enrollment_ID
		,	( member_id )				::	INTEGER			AS	member_ID
		,	( enrollment_start_date )	::	DATE			AS	enrollment_Start_Date
		,	( enrollment_term_date )	::	DATE			AS	enrollment_Term_Date
		,	( zip3_code )				::	VARCHAR( 3 )	AS	zip3_Code
		,	( rx_benefit_indicator )	::	VARCHAR( 1 )	AS	rx_Benefit_Indicator
	FROM
		cust_abs_raw.BHI_member_enrollment
);	/*	POPULATE	clean_raw.BHI_raw_member_enrollment	*/



--ANALYZE COMPRESSION		clean_raw.BHI_member_enrollment;
ANALYZE					clean_raw.BHI_member_enrollment;
VACUUM SORT ONLY		clean_raw.BHI_member_enrollment;
ANALYZE					clean_raw.BHI_member_enrollment;



select			table_name
			,	column_name
			,	ordinal_position
			,	data_type
			,	character_maximum_length
from		information_schema.columns
where			table_schema = 'clean_raw'
			and	table_name = 'bhi_facility_claim_header'
order by	ordinal_position;



analyze	compression	clean_raw.bhi_facility_claim_header;


</SQL>
    <Name>BHI member</Name>
  </Query>
  <Query IsView="False" IsSP="False">
    <SQL>DROP TABLE IF EXISTS	ref.BHI_cpt_codes_pre;
CREATE TABLE				ref.BHI_cpt_codes_pre
(		HCPCS_CPT_Code		VARCHAR( 14 )	ENCODE	RAW
	,	Short_Description	VARCHAR( 28 )	ENCODE	RAW
	,	Year				VARCHAR(  4 )	ENCODE	RAW
)	/*	create			ref.BHI_cpt_codes_pre	*/
DISTSTYLE 				ALL
COMPOUND SORTKEY( HCPCS_CPT_Code );



COPY		ref.BHI_cpt_codes_pre
FROM		's3://dhp-randlab-s3/users/mpazen/codesets/CPT.txt'
credentials 'aws_iam_role=arn:aws:iam::722648170004:role/Data_Wranglers' COMPUPDATE ON;

--ANALYZE COMPRESSION		ref.BHI_cpt_codes_pre;
ANALYZE					ref.BHI_cpt_codes_pre;
VACUUM SORT ONLY		ref.BHI_cpt_codes_pre;
ANALYZE					ref.BHI_cpt_codes_pre;



DROP TABLE IF EXISTS	ref.BHI_cpt_codes;
CREATE TABLE			ref.BHI_cpt_codes
(		HCPCS_CPT_Code		VARCHAR( 14 )	ENCODE	RAW
	,	short_Desc			VARCHAR( 28 )	ENCODE	RAW
	,	short_Desc_alphanu	VARCHAR( 28 )	ENCODE	RAW
	,	year				VARCHAR(  4 )	ENCODE	RAW
)	/*	create			ref.BHI_cpt_codes		*/
DISTSTYLE 				ALL
COMPOUND SORTKEY( HCPCS_CPT_Code );



INSERT INTO		ref.BHI_cpt_codes
(	SELECT DISTINCT
			( HCPCS_CPT_Code )		::	VARCHAR( 14 )	AS	HCPCS_CPT_Code
		,	( Short_Description )	::	VARCHAR( 28 )	AS	short_Desc
		,	( REGEXP_REPLACE( Short_Description, '[^a-zA-Z0-9]+', ' ' ) )
									::	VARCHAR( 28 )	AS	short_Desc_alphanu
		,	( Year )				::	VARCHAR(  4 )	AS	year
	FROM
		ref.BHI_cpt_codes_pre
);	/*	populate		ref.BHI_cpt_codes		*/

--ANALYZE COMPRESSION		ref.BHI_cpt_codes;
ANALYZE					ref.BHI_cpt_codes;
VACUUM SORT ONLY		ref.BHI_cpt_codes;
ANALYZE					ref.BHI_cpt_codes;


/*
This table is constructed to accept the raw data from the copy below.  It's a table of ICD9 diagnosis codes I got from Melissa's directory on
the S3 bucket.  If length is any indicator, it's a good list, as it contains just over 100,000 rows.  I called the table "pre" because an
additional column useful (hopefully) for text searches is to  be added after the data are loaded.
*/
DROP TABLE IF EXISTS	ref.BHI_ICD9_DX_codes_pre;
CREATE TABLE			ref.BHI_ICD9_DX_codes_pre
(		dx_code			VARCHAR(   5 )	ENCODE	ZSTD
	,	First			DATE			ENCODE	ZSTD
	,	Last			DATE			ENCODE	ZSTD
	,	dx_short_desc	VARCHAR(  24 )	ENCODE	ZSTD
	,	version			VARCHAR(   1 )	ENCODE	ZSTD
	,	dx_long_desc	VARCHAR( 222 )	ENCODE	ZSTD
	,	CLASS			VARCHAR(  69 )	ENCODE	ZSTD
	,	SubCLASS		VARCHAR( 156 )	ENCODE	ZSTD
	,	SUBSubCLASS		VARCHAR( 156 )	ENCODE	RAW
)	/*	create			ref.BHI_ICD9_DX_codes_pre		*/
DISTSTYLE 				ALL
COMPOUND SORTKEY( dx_code );



COPY		ref.BHI_ICD9_DX_codes_pre
FROM		's3://dhp-randlab-s3/users/mpazen/codesets/ICD9.txt'
credentials 'aws_iam_role=arn:aws:iam::722648170004:role/Data_Wranglers'
ACCEPTANYDATE ACCEPTINVCHARS '^' BLANKSASNULL EMPTYASNULL NULL AS 'NULL' IGNOREBLANKLINES DATEFORMAT 'auto'
IGNOREHEADER 1 TRIMBLANKS DELIMITER '|' STATUPDATE ON MAXERROR 0 COMPUPDATE ON;

--ANALYZE COMPRESSION		ref.BHI_ICD9_DX_codes_pre;
ANALYZE					ref.BHI_ICD9_DX_codes_pre;
VACUUM SORT ONLY		ref.BHI_ICD9_DX_codes_pre;
ANALYZE					ref.BHI_ICD9_DX_codes_pre;



DROP TABLE IF EXISTS	ref.BHI_ICD9_DX_codes;
CREATE TABLE			ref.BHI_ICD9_DX_codes
(		ICD9_DX_Code			VARCHAR(   5 )	ENCODE	ZSTD
	,	first_Date				DATE			ENCODE	ZSTD
	,	last_Date				DATE			ENCODE	ZSTD
	,	short_Description		VARCHAR(  24 )	ENCODE	ZSTD
	,	version					VARCHAR(   1 )	ENCODE	ZSTD
	,	long_Description		VARCHAR( 222 )	ENCODE	ZSTD
	,	long_Desc_Alphanu		VARCHAR( 222 )	ENCODE	ZSTD
	,	class					VARCHAR(  69 )	ENCODE	ZSTD
	,	sub_Class				VARCHAR( 156 )	ENCODE	ZSTD
	,	sub_Sub_Class			VARCHAR( 156 )	ENCODE	RAW
)	/*	create			ref.BHI_ICD9_DX_codes	*/
DISTSTYLE 				ALL
COMPOUND SORTKEY( ICD9_DX_Code );



INSERT INTO			ref.BHI_ICD9_DX_codes
(	SELECT DISTINCT
			( dx_code )			::	VARCHAR(   5 )	AS	ICD9_DX_Code
		,	( First )			::	DATE			AS	first_Date
		,	( Last )			::	DATE			AS	last_Date
		,	( dx_short_desc )	::	VARCHAR(  24 )	AS	short_Description
		,	( version )			::	VARCHAR(   1 )	AS	version
		,	( dx_long_desc )	::	VARCHAR( 222 )	AS	long_Description
		,	( REGEXP_REPLACE( dx_long_desc, '[^a-zA-Z0-9]+', ' ' ) )
								::	VARCHAR( 222 )	AS	long_Desc_Alphanu
		,	( CLASS )			::	VARCHAR(  69 )	AS	class
		,	( SubCLASS )		::	VARCHAR( 156 )	AS	sub_Class
		,	( SUBSubCLASS )		::	VARCHAR( 156 )	AS	sub_Sub_Class
	FROM
		ref.BHI_ICD9_DX_codes_pre
);	/*	populate		ref.BHI_ICD9_DX_codes		*/

--ANALYZE COMPRESSION		ref.BHI_ICD9_DX_codes;
ANALYZE					ref.BHI_ICD9_DX_codes;
VACUUM SORT ONLY		ref.BHI_ICD9_DX_codes;
ANALYZE					ref.BHI_ICD9_DX_codes;


/*
This table is constructed to accept the raw data from the copy below.  It's a table of ICD10-CM diagnosis codes
downloaded from the CDC.  It's "pre" because an additional column useful (hopefully) for text searches is to 
be added after the data are loaded.
*/
DROP TABLE IF EXISTS	ref.BHI_ICD10_DX_codes_pre;
CREATE TABLE			ref.BHI_ICD10_DX_codes_pre
(		order_Number		INTEGER			ENCODE	RAW
	,	ICD10_DX_Code		VARCHAR(   7 )	ENCODE	RAW
	,	valid_HIPAA_Flag	VARCHAR(   1 )	ENCODE	RAW
	,	short_Description	VARCHAR(  62 )	ENCODE	ZSTD
	,	long_Description	VARCHAR( 230 )	ENCODE	ZSTD
)
DISTSTYLE 				ALL
COMPOUND SORTKEY( ICD10_DX_Code );



COPY		ref.BHI_ICD10_DX_codes_pre
FROM		's3://dhp-randlab-s3/users/whaight/icd10cm_order_2019.txt'
credentials 'aws_iam_role=arn:aws:iam::722648170004:role/Data_Wranglers'
ACCEPTANYDATE ACCEPTINVCHARS '^' BLANKSASNULL EMPTYASNULL NULL AS 'NULL' IGNOREBLANKLINES DATEFORMAT 'auto'
IGNOREHEADER 0 TRIMBLANKS DELIMITER '\t' STATUPDATE ON MAXERROR 0 COMPUPDATE ON;

--ANALYZE COMPRESSION	ref.BHI_ICD10_DX_codes_pre;
ANALYZE					ref.BHI_ICD10_DX_codes_pre;
VACUUM SORT ONLY		ref.BHI_ICD10_DX_codes_pre;
ANALYZE					ref.BHI_ICD10_DX_codes_pre;


/*
This table is an expanded version of BHI_ICD10_DX_codes_pre;  long_Desc_Alphanu is the same as long_Description, except
that all non-alphanumeric characters have been replaced with a blank (' ').
*/
DROP TABLE IF EXISTS	clean_raw.BHI_ICD10_DX_codes;
DROP TABLE IF EXISTS	ref.BHI_ICD10_DX_codes;
CREATE TABLE			ref.BHI_ICD10_DX_codes
(		order_Number		INTEGER			ENCODE	RAW
	,	ICD10_DX_Code		VARCHAR(   7 )	ENCODE	RAW
	,	valid_HIPAA_Flag	VARCHAR(   1 )	ENCODE	RAW
	,	short_Description	VARCHAR(  62 )	ENCODE	ZSTD
	,	long_Description	VARCHAR( 230 )	ENCODE	ZSTD
	,	long_Desc_Alphanu	VARCHAR( 230 )	ENCODE	ZSTD
)	/*	create				ref.BHI_ICD10_DX_codes	*/
DISTSTYLE 				ALL
COMPOUND SORTKEY( ICD10_DX_Code );



INSERT INTO			ref.BHI_ICD10_DX_codes
(	SELECT DISTINCT
			( order_Number )												::	INTEGER			AS	order_Number
		,	( ICD10_DX_Code )												::	VARCHAR(   7 )	AS	ICD10_DX_Code
		,	( valid_HIPAA_Flag )											::	VARCHAR(   1 )	AS	valid_HIPAA_Flag
		,	( short_Description )											::	VARCHAR(  62 )	AS	short_Description
		,	( long_Description )											::	VARCHAR( 230 )	AS	long_Description
		,	( REGEXP_REPLACE( long_Description, '[^a-zA-Z0-9]+', ' ' ) )	::	VARCHAR( 230 )	AS	long_Desc_Alphanu
	FROM
		ref.BHI_ICD10_DX_codes_pre
);	/*	populate	ref.BHI_ICD10_codes		*/

--ANALYZE COMPRESSION		ref.BHI_ICD10_DX_codes;
ANALYZE					ref.BHI_ICD10_DX_codes;
VACUUM SORT ONLY		ref.BHI_ICD10_DX_codes;
ANALYZE					ref.BHI_ICD10_DX_codes;



DROP TABLE IF EXISTS	clean_raw.BHI_ndc_codes_pre;
DROP TABLE IF EXISTS	ref.BHI_ndc_codes_pre;
CREATE TABLE			ref.BHI_ndc_codes_pre						/*	package	product	*/
(		product_ID					VARCHAR(  47 )	ENCODE	ZSTD		/*	X		X		*/
	,	product_NDC					VARCHAR(  10 )	ENCODE	ZSTD		/*	X		X		*/
	,	start_mktg_Date				DATE			ENCODE	ZSTD		/*	X		X		*/
	,	end_mktg_Date				DATE			ENCODE	RAW			/*	X		X		*/
	,	NDC_exclude_Flag			VARCHAR(   1 )	ENCODE	ZSTD		/*	X		X		*/
	,	NDC_package_Code			VARCHAR(  12 )	ENCODE	ZSTD		/*	X				*/
	,	package_Desc				VARCHAR( 256 )	ENCODE	ZSTD		/*	X				*/
	,	sample_Package				VARCHAR(   1 )	ENCODE	ZSTD		/*	X				*/
	,	product_Type_Name			VARCHAR(  27 )	ENCODE	ZSTD		/*			X		*/
	,	proprietary_Name			VARCHAR( 226 )	ENCODE	ZSTD		/*			X		*/
	,	proprietary_Name_Suff		VARCHAR( 126 )	ENCODE	ZSTD		/*			X		*/
	,	non_Proprietary_Name		VARCHAR( 256 )	ENCODE	ZSTD		/*			X		*/
	,	dosage_Form_Name			VARCHAR(  46 )	ENCODE	ZSTD		/*			X		*/
	,	route_Name					VARCHAR( 143 )	ENCODE	ZSTD		/*			X		*/
	,	marktg_Category_Name		VARCHAR(  40 )	ENCODE	ZSTD		/*			X		*/
	,	application_Number			VARCHAR(  15 )	ENCODE	ZSTD		/*			X		*/
	,	labeler_Name				VARCHAR( 121 )	ENCODE	ZSTD		/*			X		*/
	,	substance_Name				VARCHAR( 256 )	ENCODE	ZSTD		/*			X		*/
	,	active_Numerator_Strength	VARCHAR( 256 )	ENCODE	ZSTD		/*			X		*/
	,	active_Ingred_Unit			VARCHAR( 256 )	ENCODE	ZSTD		/*			X		*/
	,	pharm_Classes				VARCHAR( 256 )	ENCODE	ZSTD		/*			X		*/
	,	DEA_Schedule				VARCHAR(   4 )	ENCODE	ZSTD		/*			X		*/
	,	listing_Rec_Cert_Through	VARCHAR(  27 )	ENCODE	ZSTD		/*			X		*/
)	/*	create			ref.BHI_ndc_codes_pre	*/
DISTSTYLE 				ALL
COMPOUND SORTKEY( NDC_package_Code );



COPY		ref.BHI_ndc_codes_pre
FROM		's3://dhp-randlab-s3/users/mpazen/codesets/NDC_Pipe.txt'
credentials 'aws_iam_role=arn:aws:iam::722648170004:role/Data_Wranglers'
ACCEPTANYDATE ACCEPTINVCHARS '^' BLANKSASNULL EMPTYASNULL NULL AS 'NULL' IGNOREBLANKLINES DATEFORMAT 'auto'
IGNOREHEADER 1 TRIMBLANKS DELIMITER '|' STATUPDATE ON MAXERROR 0  COMPUPDATE ON;

--ANALYZE COMPRESSION		ref.BHI_ndc_codes_pre;
ANALYZE					ref.BHI_ndc_codes_pre;
VACUUM SORT ONLY		ref.BHI_ndc_codes_pre;
ANALYZE					ref.BHI_ndc_codes_pre;



DROP TABLE IF EXISTS	clean_raw.BHI_ndc_codes;
DROP TABLE IF EXISTS	ref.BHI_ndc_codes;
CREATE TABLE			ref.BHI_ndc_codes							/*	package	product	*/
(		product_ID					VARCHAR(  47 )	ENCODE	ZSTD		/*	X		X		*/
	,	product_NDC					VARCHAR(  10 )	ENCODE	ZSTD		/*	X		X		*/
	,	start_mktg_Date				DATE			ENCODE	ZSTD		/*	X		X		*/
	,	end_mktg_Date				DATE			ENCODE	RAW			/*	X		X		*/
	,	NDC_exclude_Flag			VARCHAR(   1 )	ENCODE	ZSTD		/*	X		X		*/
	,	NDC_package_Code			VARCHAR(  12 )	ENCODE	ZSTD		/*	X				*/
	,	package_Desc				VARCHAR( 256 )	ENCODE	ZSTD		/*	X				*/
	,	package_Desc_alphanu		VARCHAR( 256 )	ENCODE	ZSTD		/*	X				*/
	,	sample_Package				VARCHAR(   1 )	ENCODE	ZSTD		/*			X		*/
	,	product_Type_Name			VARCHAR(  27 )	ENCODE	ZSTD		/*			X		*/
	,	proprietary_Name			VARCHAR( 226 )	ENCODE	ZSTD		/*			X		*/
	,	proprietary_Name_Suff		VARCHAR( 126 )	ENCODE	ZSTD		/*			X		*/
	,	non_Proprietary_Name		VARCHAR( 256 )	ENCODE	ZSTD		/*			X		*/
	,	dosage_Form_Name			VARCHAR(  46 )	ENCODE	ZSTD		/*			X		*/
	,	route_Name					VARCHAR( 143 )	ENCODE	ZSTD		/*			X		*/
	,	marktg_Category_Name		VARCHAR(  40 )	ENCODE	ZSTD		/*			X		*/
	,	application_Number			VARCHAR(  15 )	ENCODE	ZSTD		/*			X		*/
	,	labeler_Name				VARCHAR( 121 )	ENCODE	ZSTD		/*			X		*/
	,	substance_Name				VARCHAR( 256 )	ENCODE	ZSTD		/*			X		*/
	,	active_Numerator_Strength	VARCHAR( 256 )	ENCODE	ZSTD		/*			X		*/
	,	active_Ingred_Unit			VARCHAR( 256 )	ENCODE	ZSTD		/*			X		*/
	,	pharm_Classes				VARCHAR( 256 )	ENCODE	ZSTD		/*			X		*/
	,	DEA_Schedule				VARCHAR(   4 )	ENCODE	ZSTD		/*			X		*/
	,	listing_Rec_Cert_Through	VARCHAR(  27 )	ENCODE	ZSTD		/*			X		*/
)	/*	create			ref.BHI_ndc_codes		*/
DISTSTYLE 				ALL
COMPOUND SORTKEY( NDC_package_Code );



INSERT INTO			ref.BHI_ndc_codes
(	SELECT DISTINCT
			( product_ID )					::	VARCHAR(  47 )	AS	product_ID
		,	( product_NDC )					::	VARCHAR(  10 )	AS	product_NDC
		,	( start_mktg_Date )				::	DATE			AS	start_mktg_Date
		,	( end_mktg_Date )				::	DATE			AS	end_mktg_Date
		,	( NDC_exclude_Flag )			::	VARCHAR(   1 )	AS	NDC_exclude_Flag
		,	( NDC_package_Code )			::	VARCHAR(  12 )	AS	NDC_package_Code
		,	( package_Desc )				::	VARCHAR( 256 )	AS	package_Desc
		,	( REGEXP_REPLACE( package_Desc, '[^a-zA-Z0-9]+', ' ' ) )
											::	VARCHAR( 256 )	AS	package_Desc_alphanu
		,	( sample_Package )				::	VARCHAR(   1 )	AS	sample_Package
		,	( product_Type_Name )			::	VARCHAR(  27 )	AS	product_Type_Name
		,	( proprietary_Name )			::	VARCHAR( 226 )	AS	proprietary_Name
		,	( proprietary_Name_Suff )		::	VARCHAR( 126 )	AS	proprietary_Name_Suff
		,	( non_Proprietary_Name )		::	VARCHAR( 256 )	AS	non_Proprietary_Name
		,	( dosage_Form_Name )			::	VARCHAR(  46 )	AS	dosage_Form_Name
		,	( route_Name )					::	VARCHAR( 143 )	AS	route_Name
		,	( marktg_Category_Name )		::	VARCHAR(  40 )	AS	marktg_Category_Name
		,	( application_Number )			::	VARCHAR(  15 )	AS	application_Number
		,	( labeler_Name )				::	VARCHAR( 121 )	AS	labeler_Name
		,	( substance_Name )				::	VARCHAR( 256 )	AS	substance_Name
		,	( active_Numerator_Strength )	::	VARCHAR( 256 )	AS	active_Numerator_Strength
		,	( active_Ingred_Unit )			::	VARCHAR( 256 )	AS	active_Ingred_Unit
		,	( pharm_Classes )				::	VARCHAR( 256 )	AS	pharm_Classes
		,	( DEA_Schedule )				::	VARCHAR(   4 )	AS	DEA_Schedule
		,	( listing_Rec_Cert_Through )	::	VARCHAR(  27 )	AS	listing_Rec_Cert_Through
	FROM
		ref.BHI_ndc_codes_pre
);	/*	populate		ref.BHI_ndc_codes		*/

--ANALYZE COMPRESSION		ref.BHI_ndc_codes;
ANALYZE					ref.BHI_ndc_codes;
VACUUM SORT ONLY		ref.BHI_ndc_codes;
ANALYZE					ref.BHI_ndc_codes;



DROP TABLE IF EXISTS	clean_raw.BHI_cpt_codes_pre;
DROP TABLE IF EXISTS	clean_raw.BHI_ICD9_codes_pre;
DROP TABLE IF EXISTS	clean_raw.BHI_ICD10_codes_pre;
DROP TABLE IF EXISTS	clean_raw.BHI_ndc_codes_pre;


DROP TABLE IF EXISTS	ref.BHI_cpt_codes_pre;
DROP TABLE IF EXISTS	ref.BHI_ICD9_codes_pre;
DROP TABLE IF EXISTS	ref.BHI_ICD10_codes_pre;
DROP TABLE IF EXISTS	ref.BHI_ndc_codes_pre;



DROP TABLE IF EXISTS		clean_raw.BHI_ndc_codes_package;
DROP TABLE IF EXISTS		ref.BHI_ndc_codes_package;
CREATE TABLE				ref.BHI_ndc_codes_package		/*	package	product	*/
(		product_ID			VARCHAR(  47 )	ENCODE	ZSTD		--	*		*
	,	product_NDC			VARCHAR(  10 )	ENCODE	ZSTD		--	*		*
	,	NDC_package_Code	VARCHAR(  12 )	ENCODE	ZSTD		--	*
	,	package_Desc		VARCHAR( 779 )	ENCODE	ZSTD		--	*
	,	start_mktg_Date		DATE			ENCODE	ZSTD		--	*		*
	,	end_mktg_Date		DATE			ENCODE	RAW			--	*		*
	,	NDC_exclude_Flag	VARCHAR(   1 )	ENCODE	ZSTD		--	*		*
	,	sample_Package		VARCHAR(   1 )	ENCODE	ZSTD		--	*
)
DISTSTYLE 			ALL
COMPOUND SORTKEY( product_NDC, NDC_package_Code );
;	/*	create			ref.BHI_ndc_codes_package		*/



COPY		ref.BHI_ndc_codes_package
FROM		's3://dhp-randlab-s3/users/whaight/package.txt'
credentials 'aws_iam_role=arn:aws:iam::722648170004:role/Data_Wranglers'
ACCEPTANYDATE ACCEPTINVCHARS '^' BLANKSASNULL EMPTYASNULL NULL AS 'NULL' IGNOREBLANKLINES DATEFORMAT 'auto'
IGNOREHEADER 1 TRIMBLANKS DELIMITER '\t' STATUPDATE ON MAXERROR 2  COMPUPDATE ON;



DROP TABLE IF EXISTS		clean_raw.BHI_ndc_codes_product;
DROP TABLE IF EXISTS		ref.BHI_ndc_codes_product;
CREATE TABLE				ref.BHI_ndc_codes_product				/*	package	product	*/
(		product_ID					VARCHAR(   47 )	ENCODE	ZSTD		--	*		*
	,	product_NDC					VARCHAR(   10 )	ENCODE	ZSTD		--	*		*
	,	product_Type_Name			VARCHAR(   27 )	ENCODE	ZSTD		--			*
	,	proprietary_Name			VARCHAR(  226 )	ENCODE	ZSTD		--			*
	,	proprietary_Name_Suff		VARCHAR(  127 )	ENCODE	ZSTD		--			*
	,	non_Proprietary_Name		VARCHAR(  514 )	ENCODE	ZSTD		--			*
	,	dosage_Form_Name			VARCHAR(   48 )	ENCODE	ZSTD		--			*
	,	route_Name					VARCHAR(  143 )	ENCODE	ZSTD		--			*
	,	start_mktg_Date				DATE			ENCODE	ZSTD		--	*		*
	,	end_mktg_Date				DATE			ENCODE	RAW			--	*		*
	,	marktg_Category_Name		VARCHAR(   40 )	ENCODE	ZSTD		--			*
	,	application_Number			VARCHAR(   17 )	ENCODE	ZSTD		--			*
	,	labeler_Name				VARCHAR(  121 )	ENCODE	ZSTD		--			*
	,	substance_Name				VARCHAR( 3816 )	ENCODE	ZSTD		--			*
	,	active_Numerator_Strength	VARCHAR(  742 )	ENCODE	ZSTD		--			*
	,	active_Ingred_Unit			VARCHAR( 2055 )	ENCODE	ZSTD		--			*
	,	pharm_Classes				VARCHAR( 4000 )	ENCODE	ZSTD		--			*
	,	DEA_Schedule				VARCHAR(    4 )	ENCODE	ZSTD		--			*
	,	NDC_exclude_Flag			VARCHAR(    1 )	ENCODE	ZSTD		--	*		*
	,	listing_Rec_Cert_Through	VARCHAR(    8 )	ENCODE	ZSTD		--			*
)
DISTSTYLE 				ALL
COMPOUND SORTKEY( product_NDC );
;	/*	create			ref.BHI_ndc_codes_product	*/



COPY		ref.BHI_ndc_codes_product
FROM		's3://dhp-randlab-s3/users/whaight/product.txt'
credentials 'aws_iam_role=arn:aws:iam::722648170004:role/Data_Wranglers'
ACCEPTANYDATE ACCEPTINVCHARS '^' BLANKSASNULL EMPTYASNULL NULL AS 'NULL' IGNOREBLANKLINES DATEFORMAT 'auto'
IGNOREHEADER 1 TRIMBLANKS DELIMITER '\t' STATUPDATE ON MAXERROR 0  COMPUPDATE ON;



DROP TABLE IF EXISTS		clean_raw.BHI_ndc_codes;
DROP TABLE IF EXISTS		ref.BHI_ndc_codes;
CREATE TABLE				ref.BHI_ndc_codes							/*	package	product	*/
(		product_ID						VARCHAR(   47 )	ENCODE	ZSTD		--	*		*
	,	product_NDC						VARCHAR(   10 )	ENCODE	ZSTD		--	*		*
	,	NDC_package_Code				VARCHAR(   12 )	ENCODE	ZSTD		--	*
	,	package_Desc					VARCHAR(  779 )	ENCODE	ZSTD		--	*
	,	package_Desc_alphanu			VARCHAR(  779 )	ENCODE	ZSTD
	,	prod_start_mktg_Date			DATE			ENCODE	ZSTD		--			*
	,	prod_end_mktg_Date				DATE			ENCODE	RAW			--			*
	,	pkg_start_mktg_Date				DATE			ENCODE	ZSTD		--	*
	,	pkg_end_mktg_Date				DATE			ENCODE	RAW			--	*
	,	NDC_exclude_Flag				VARCHAR(    1 )	ENCODE	ZSTD		--	*		*
	,	sample_Package					VARCHAR(    1 )	ENCODE	ZSTD		--	*
	,	product_Type_Name				VARCHAR(   27 )	ENCODE	ZSTD		--			*
	,	proprietary_Name				VARCHAR(  226 )	ENCODE	ZSTD		--			*
	,	proprietary_Name_Suff			VARCHAR(  127 )	ENCODE	ZSTD		--			*
	,	non_Proprietary_Name			VARCHAR(  514 )	ENCODE	ZSTD		--			*
	,	non_Proprietary_Name_alphanu	VARCHAR(  514 )	ENCODE	ZSTD
	,	dosage_Form_Name				VARCHAR(   48 )	ENCODE	ZSTD		--			*
	,	route_Name						VARCHAR(  143 )	ENCODE	ZSTD		--			*
	,	marktg_Category_Name			VARCHAR(   40 )	ENCODE	ZSTD		--			*
	,	application_Number				VARCHAR(   17 )	ENCODE	ZSTD		--			*
	,	labeler_Name					VARCHAR(  121 )	ENCODE	ZSTD		--			*
	,	substance_Name					VARCHAR( 3816 )	ENCODE	ZSTD		--			*
	,	substance_Name_alphanu			VARCHAR( 3816 )	ENCODE	ZSTD
	,	active_Numerator_Strength		VARCHAR(  742 )	ENCODE	ZSTD		--			*
	,	active_Ingred_Unit				VARCHAR( 2055 )	ENCODE	ZSTD		--			*
	,	active_Ingred_Unit_alphanu		VARCHAR( 2055 )	ENCODE	ZSTD	
	,	pharm_Classes					VARCHAR( 4000 )	ENCODE	ZSTD		--			*
	,	pharm_Classes_alphanu			VARCHAR( 4000 )	ENCODE	ZSTD
	,	DEA_Schedule					VARCHAR(    4 )	ENCODE	ZSTD		--			*
	,	listing_Rec_Cert_Through		VARCHAR(    8 )	ENCODE	ZSTD		--			*
)
DISTSTYLE 				ALL
COMPOUND SORTKEY( product_NDC, NDC_package_Code );
;	/*	create			ref.BHI_ndc_codes		*/



INSERT INTO			ref.BHI_ndc_codes
(	SELECT DISTINCT
			( BHI_ndc_codes_product.product_ID )				::	VARCHAR(   47 )	AS	product_ID
		,	( BHI_ndc_codes_product.product_NDC )				::	VARCHAR(   10 )	AS	product_NDC
		,	( BHI_ndc_codes_package.NDC_package_Code )			::	VARCHAR(   12 )	AS	NDC_package_Code
		,	( BHI_ndc_codes_package.package_Desc )				::	VARCHAR(  779 )	AS	package_Desc
		,	( REGEXP_REPLACE( BHI_ndc_codes_package.package_Desc, '[^a-zA-Z0-9]+', ' ' ) )
																::	VARCHAR(  779 )	AS	package_Desc_alphanu
		,	( BHI_ndc_codes_product.start_mktg_Date )			::	DATE			AS	prod_start_mktg_Date
		,	( BHI_ndc_codes_product.end_mktg_Date )				::	DATE			AS	prod_end_mktg_Date
		,	( BHI_ndc_codes_package.start_mktg_Date )			::	DATE			AS	pkg_start_mktg_Date
		,	( BHI_ndc_codes_package.end_mktg_Date )				::	DATE			AS	pkg_end_mktg_Date
		,	( BHI_ndc_codes_product.NDC_exclude_Flag )			::	VARCHAR(    1 )	AS	NDC_exclude_Flag
		,	( BHI_ndc_codes_package.sample_Package )			::	VARCHAR(    1 )	AS	sample_Package
		,	( BHI_ndc_codes_product.product_Type_Name )			::	VARCHAR(   27 )	AS	product_Type_Name
		,	( BHI_ndc_codes_product.proprietary_Name )			::	VARCHAR(  226 )	AS	proprietary_Name
		,	( BHI_ndc_codes_product.proprietary_Name_Suff )		::	VARCHAR(  127 )	AS	proprietary_Name_Suff
		,	( BHI_ndc_codes_product.non_Proprietary_Name )		::	VARCHAR(  514 )	AS	non_Proprietary_Name
		,	( REGEXP_REPLACE( BHI_ndc_codes_product.non_Proprietary_Name, '[^a-zA-Z0-9]+', ' ' ) )
																::	VARCHAR(  514 )	AS	non_Proprietary_Name_alphanu
		,	( BHI_ndc_codes_product.dosage_Form_Name )			::	VARCHAR(   48 )	AS	dosage_Form_Name
		,	( BHI_ndc_codes_product.route_Name )				::	VARCHAR(  143 )	AS	route_Name
		,	( BHI_ndc_codes_product.marktg_Category_Name )		::	VARCHAR(   40 )	AS	marktg_Category_Name
		,	( BHI_ndc_codes_product.application_Number )		::	VARCHAR(   17 )	AS	application_Number
		,	( BHI_ndc_codes_product.labeler_Name )				::	VARCHAR(  121 )	AS	labeler_Name
		,	( BHI_ndc_codes_product.substance_Name )			::	VARCHAR( 3816 )	AS	substance_Name
		,	( REGEXP_REPLACE( BHI_ndc_codes_product.substance_Name, '[^a-zA-Z0-9]+', ' ' ) )
																::	VARCHAR( 3816 )	AS	substance_Name_alphanu
		,	( BHI_ndc_codes_product.active_Numerator_Strength )	::	VARCHAR(  742 )	AS	active_Numerator_Strength
		,	( BHI_ndc_codes_product.active_Ingred_Unit )		::	VARCHAR( 2055 )	AS	active_Ingred_Unit
		,	( REGEXP_REPLACE( BHI_ndc_codes_product.active_Ingred_Unit, '[^a-zA-Z0-9]+', ' ' ) )
																::	VARCHAR( 2055 )	AS	active_Ingred_Unit_alphanu
		,	( BHI_ndc_codes_product.pharm_Classes )				::	VARCHAR( 4000 )	AS	pharm_Classes
		,	( REGEXP_REPLACE( BHI_ndc_codes_product.pharm_Classes, '[^a-zA-Z0-9]+', ' ' ) )
																::	VARCHAR( 4000 )	AS	pharm_Classes_alphanu
		,	( BHI_ndc_codes_product.DEA_Schedule )				::	VARCHAR(    4 )	AS	DEA_Schedule
		,	( BHI_ndc_codes_product.listing_Rec_Cert_Through )	::	VARCHAR(    8 )	AS	listing_Rec_Cert_Through
	FROM
		ref.BHI_ndc_codes_product
	LEFT JOIN
		ref.BHI_ndc_codes_package
	ON
		BHI_ndc_codes_package.product_ndc		= BHI_ndc_codes_product.product_NDC
);	/*	populate		ref.BHI_ndc_codes		*/

--ANALYZE COMPRESSION		ref.BHI_ndc_codes;
ANALYZE					ref.BHI_ndc_codes;
VACUUM SORT ONLY		ref.BHI_ndc_codes;
ANALYZE					ref.BHI_ndc_codes;

DROP TABLE IF EXISTS	ref.BHI_ICD9_DX_codes_pre;
DROP TABLE IF EXISTS	ref.BHI_ICD10_DX_codes_pre;



</SQL>
    <Name>med codes</Name>
  </Query>
  <Query IsView="False" IsSP="False">
    <SQL>


/*
It became useful to identify those ICD9 diagnosis codes present in the BHI claims data which were not actually listed in the List.  Is there a
pattern here?  Were they simply miskeyed?  How much money is there associated with these bogus codes?  Or, is the list of ICD9 diagnosis codes
incomplete?  Are there "folk codes" in broad use due to a need yet to be addressed by the holy keepers of the codes?  The first step lies in identifying
these codes in use not enshrined in the list.
*/
DROP TABLE IF EXISTS	clean_raw.BHI_ICD9_codes_in_claims_not_List;
DROP TABLE IF EXISTS	whaight.BHI_ICD9_codes_in_claims_not_List;
CREATE TABLE			whaight.BHI_ICD9_codes_in_claims_not_List
(	ICD9_DX_code	VARCHAR( 7 )	ENCODE	ZSTD	)
DISTSTYLE 			ALL
COMPOUND SORTKEY( ICD9_DX_code );



INSERT INTO		whaight.BHI_ICD9_codes_in_claims_not_List
(	SELECT		ICD9_DX_Code		AS	ICD9_DX_Code
	FROM				(	SELECT	ICD9_DX_Code
							FROM	ref.ICD9_DX_Codes_in_paid_BHI_Claims
							WHERE	ICD9_DX_Code IS NOT NULL	
									AND	LEN( BTRIM( ICD9_DX_Code ) ) &gt; 0	)
				MINUS	(	SELECT	ICD9_DX_Code
							FROM	ref.legit_ICD9_DX_Codes	)
	ORDER BY		ICD9_DX_Code
);

--ANALYZE COMPRESSION	whaight.BHI_ICD9_codes_in_claims_not_List;
ANALYZE				whaight.BHI_ICD9_codes_in_claims_not_List;
VACUUM SORT ONLY	whaight.BHI_ICD9_codes_in_claims_not_List;
ANALYZE				whaight.BHI_ICD9_codes_in_claims_not_List;



select * from clean_raw.BHI_ICD9_codes_in_claims_not_List;</SQL>
    <Name>ICD9 Inves.</Name>
  </Query>
  <Query IsView="False" IsSP="False">
    <SQL>


/*
It became useful to identify those ECD10 diagnosis codes present in the BHI claims data which were not actually listed in the CDC table.  Is there a
pattern here?  Were they simply miskeyed?  How much money is there associated with these bogus codes?  Or, is the CDC list of ICD10 diagnosis codes
incomplete?  Are there "folk codes" in broad use due to a need yet to be addressed by the holy keepers of the codes?  The first step lies in identifying
these codes in use not enshrined in the CDC list.  One noteworthy code is "NA".  One has to wonder how a code which so clearly violates the ICD10
pattern came into such widespread use.  Or maybe not.
*/
DROP TABLE IF EXISTS		clean_raw.BHI_ICD10_codes_in_paid_claims_not_CDC;
DROP TABLE IF EXISTS		whaight.BHI_ICD10_DX_codes_in_paid_claims_not_CDC;
CREATE TABLE				whaight.BHI_ICD10_DX_codes_in_paid_claims_not_CDC
(	ICD10_DX_code	VARCHAR( 7 )		ENCODE	ZSTD	)
DISTSTYLE 			ALL
COMPOUND SORTKEY( ICD10_DX_code );



INSERT INTO		whaight.BHI_ICD10_DX_codes_in_paid_claims_not_CDC
(	SELECT DISTINCT		ICD10_DX_Code	AS	ICD10_DX_Code
	FROM							(	SELECT	ICD10_DX_Code
									FROM		ref.ICD10_DX_Codes_in_paid_BHI_Claims
									WHERE	ICD10_DX_Code IS NOT NULL	
											AND	LEN( BTRIM( ICD10_DX_Code ) ) &gt; 0	)
						MINUS	(	SELECT	ICD10_DX_Code
									FROM		ref.legit_ICD10_DX_Codes	)
	ORDER BY	ICD10_DX_Code
);

--ANALYZE COMPRESSION	whaight.BHI_ICD10_DX_codes_in_paid_claims_not_CDC;
ANALYZE					whaight.BHI_ICD10_DX_codes_in_paid_claims_not_CDC;
VACUUM SORT ONLY			whaight.BHI_ICD10_DX_codes_in_paid_claims_not_CDC;
ANALYZE					whaight.BHI_ICD10_DX_codes_in_paid_claims_not_CDC;


/*
Still trying to find the total value of claims which name ICD10 codes not fouund in the CDC canonical list.  That process is eased if we can
simply save off the useful columns with the codes cleaned (i.e., all non-alphanumeric characters deleted.)  Beyond that, we only want claims
which have:
	1.	been paid (detail.claim_Payment_Status_Code = 'P');
	2.	record diagnoses in ICD10 codes (header.ICD_Code_Type = '2');  and,
	3.	at least one of the named ICD10 codes is not in the canonical CDC list (this is the final AND in the WHERE clause, the one
		with all the ORs and the ANYs)
The idea is that once these claims are isolated in a single table with all the necessary columns, it should (HAHA!) be a relatively simple
matter to group by the ICD10 codes and add up the money.

Please note that initially (sub_1 stage), facility and professional claims are handled separately.
*/
DROP TABLE IF EXISTS		clean_raw.BHI_facility_claims_with_unlisted_ICD10_DX_1;
DROP TABLE IF EXISTS		whaight.BHI_facility_claims_with_unlisted_ICD10_DX_1;
CREATE TABLE				whaight.BHI_facility_claims_with_unlisted_ICD10_DX_1
(		claim_ID						VARCHAR( 12 )		ENCODE	ZSTD
	,	member_ID					VARCHAR( 12 )		ENCODE	ZSTD
	,	ICD_Code_Type				VARCHAR(  1 )		ENCODE	ZSTD
	,	admitting_ICD10_DX_Code		VARCHAR(  8 )		ENCODE	ZSTD
	,	primary_ICD10_DX_Code		VARCHAR(  8 )		ENCODE	ZSTD
	,	secondary_ICD10_DX_Code1		VARCHAR(  8 )		ENCODE	ZSTD
	,	secondary_ICD10_DX_Code2		VARCHAR(  8 )		ENCODE	ZSTD
	,	secondary_ICD10_DX_Code3		VARCHAR(  8 )		ENCODE	ZSTD
	,	secondary_ICD10_DX_Code4		VARCHAR(  8 )		ENCODE	ZSTD
	,	secondary_ICD10_DX_Code5		VARCHAR(  8 )		ENCODE	ZSTD
	,	secondary_ICD10_DX_Code6		VARCHAR(  8 )		ENCODE	ZSTD
	,	secondary_ICD10_DX_Code7		VARCHAR(  8 )		ENCODE	ZSTD
	,	secondary_ICD10_DX_Code8		VARCHAR(  8 )		ENCODE	ZSTD
	,	secondary_ICD10_DX_Code9		VARCHAR(  8 )		ENCODE	ZSTD
	,	secondary_ICD10_DX_Code10	VARCHAR(  8 )		ENCODE	ZSTD
	,	claim_Payment_Status_Code	VARCHAR(  1 )		ENCODE	ZSTD
	,	TCRRV_Amount					NUMERIC( 10, 2 )		ENCODE	ZSTD
)
DISTKEY( claim_ID )
COMPOUND SORTKEY( claim_ID, member_ID );



INSERT INTO		whaight.BHI_facility_claims_with_unlisted_ICD10_DX_1
(	SELECT DISTINCT
			header.claim_ID															AS	claim_ID
		,	header.member_ID															AS	member_ID
		,	header.ICD_Code_Type														AS	ICD_Code_Type
		,	REGEXP_REPLACE( header.admitting_ICD10_DX_Code, '[^A-Z0-9]+', '' )		AS	admitting_ICD10_DX_Code
		,	REGEXP_REPLACE( header.primary_ICD10_DX_Code, '[^A-Z0-9]+', '' )			AS	primary_ICD10_DX_Code
		,	REGEXP_REPLACE( header.secondary_ICD10_DX_Code1, '[^A-Z0-9]+', '' )		AS	secondary_ICD10_DX_Code1
		,	REGEXP_REPLACE( header.secondary_ICD10_DX_Code2, '[^A-Z0-9]+', '' )		AS	secondary_ICD10_DX_Code2
		,	REGEXP_REPLACE( header.secondary_ICD10_DX_Code3, '[^A-Z0-9]+', '' )		AS	secondary_ICD10_DX_Code3
		,	REGEXP_REPLACE( header.secondary_ICD10_DX_Code4, '[^A-Z0-9]+', '' )		AS	secondary_ICD10_DX_Code4
		,	REGEXP_REPLACE( header.secondary_ICD10_DX_Code5, '[^A-Z0-9]+', '' )		AS	secondary_ICD10_DX_Code5
		,	REGEXP_REPLACE( header.secondary_ICD10_DX_Code6, '[^A-Z0-9]+', '' )		AS	secondary_ICD10_DX_Code6
		,	REGEXP_REPLACE( header.secondary_ICD10_DX_Code7, '[^A-Z0-9]+', '' )		AS	secondary_ICD10_DX_Code7
		,	REGEXP_REPLACE( header.secondary_ICD10_DX_Code8, '[^A-Z0-9]+', '' )		AS	secondary_ICD10_DX_Code8
		,	REGEXP_REPLACE( header.secondary_ICD10_DX_Code9, '[^A-Z0-9]+', '' )		AS	secondary_ICD10_DX_Code9
		,	REGEXP_REPLACE( header.secondary_ICD10_DX_Code10, '[^A-Z0-9]+', '' )		AS	secondary_ICD10_DX_Code10
		,	detail.claim_Payment_Status_Code											AS	claim_Payment_Status_Code
		,	detail.TCRRV_Amount														AS	TCRRV_Amount
	FROM
				clean_raw.BHI_Facility_Claim_Header		header
		JOIN		clean_raw.BHI_Facility_Claim_Detail		detail
		ON			header.member_ID		=	detail.member_ID
				AND	header.claim_ID		=	detail.claim_ID
	WHERE
			detail.claim_Payment_Status_Code		=	'P'
		AND	header.ICD_Code_Type					=	'2'
		AND	(		(	admitting_ICD10_DX_Code		=	ANY(		SELECT	ICD10_DX_code
																FROM		whaight.BHI_ICD10_DX_codes_in_paid_claims_not_CDC )	)
				OR	(	primary_ICD10_DX_Code		=	ANY(		SELECT	ICD10_DX_code
																FROM		whaight.BHI_ICD10_DX_codes_in_paid_claims_not_CDC )	)
				OR	(	secondary_ICD10_DX_Code1		=	ANY(		SELECT	ICD10_DX_code
																FROM		whaight.BHI_ICD10_DX_codes_in_paid_claims_not_CDC )	)
				OR	(	secondary_ICD10_DX_Code2		=	ANY(		SELECT	ICD10_DX_code
																FROM		whaight.BHI_ICD10_DX_codes_in_paid_claims_not_CDC )	)
				OR	(	secondary_ICD10_DX_Code3		=	ANY(		SELECT	ICD10_DX_code
																FROM		whaight.BHI_ICD10_DX_codes_in_paid_claims_not_CDC )	)
				OR	(	secondary_ICD10_DX_Code4		=	ANY(		SELECT	ICD10_DX_code
																FROM		whaight.BHI_ICD10_DX_codes_in_paid_claims_not_CDC )	)
				OR	(	secondary_ICD10_DX_Code5		=	ANY(		SELECT	ICD10_DX_code
																FROM		whaight.BHI_ICD10_DX_codes_in_paid_claims_not_CDC )	)
				OR	(	secondary_ICD10_DX_Code6		=	ANY(		SELECT	ICD10_DX_code
																FROM		whaight.BHI_ICD10_DX_codes_in_paid_claims_not_CDC )	)
				OR	(	secondary_ICD10_DX_Code7		=	ANY(		SELECT	ICD10_DX_code
																FROM		whaight.BHI_ICD10_DX_codes_in_paid_claims_not_CDC )	)
				OR	(	secondary_ICD10_DX_Code8		=	ANY(		SELECT	ICD10_DX_code
																FROM		whaight.BHI_ICD10_DX_codes_in_paid_claims_not_CDC )	)
				OR	(	secondary_ICD10_DX_Code9		=	ANY(		SELECT	ICD10_DX_code
																FROM		whaight.BHI_ICD10_DX_codes_in_paid_claims_not_CDC )	)
				OR	(	secondary_ICD10_DX_Code10	=	ANY(		SELECT	ICD10_DX_code
																FROM		whaight.BHI_ICD10_DX_codes_in_paid_claims_not_CDC )	)
			)
);

--ANALYZE COMPRESSION	whaight.BHI_facility_claims_with_unlisted_ICD10_DX_1;
ANALYZE				whaight.BHI_facility_claims_with_unlisted_ICD10_DX_1;
VACUUM SORT ONLY		whaight.BHI_facility_claims_with_unlisted_ICD10_DX_1;
ANALYZE				whaight.BHI_facility_claims_with_unlisted_ICD10_DX_1;


/*
This next DROP-CREATE-POPULATE mimics the above, but for the professional claims table
*/
DROP TABLE IF EXISTS		clean_raw.BHI_professional_claims_with_unlisted_ICD10_DX_1;
DROP TABLE IF EXISTS		whaight.BHI_professional_claims_with_unlisted_ICD10_DX_1;
CREATE TABLE				whaight.BHI_professional_claims_with_unlisted_ICD10_DX_1
(		claim_ID						VARCHAR( 12 )		ENCODE	ZSTD
	,	member_ID					VARCHAR( 12 )		ENCODE	ZSTD
	,	ICD_Code_Type				VARCHAR(  1 )		ENCODE	ZSTD
	,	primary_ICD10_DX_Code		VARCHAR(  8 )		ENCODE	ZSTD
	,	secondary_ICD10_DX_Code1		VARCHAR(  8 )		ENCODE	ZSTD
	,	secondary_ICD10_DX_Code2		VARCHAR(  8 )		ENCODE	ZSTD
	,	secondary_ICD10_DX_Code3		VARCHAR(  8 )		ENCODE	ZSTD
	,	claim_Payment_Status_Code	VARCHAR(  1 )		ENCODE	ZSTD
	,	TCRRV_Amount					NUMERIC( 10, 2 )		ENCODE	ZSTD
)
DISTKEY( claim_ID )
COMPOUND SORTKEY( claim_ID, member_ID );



INSERT INTO		whaight.BHI_professional_claims_with_unlisted_ICD10_DX_1
(	SELECT DISTINCT
			claim_ID															AS	claim_ID
		,	member_ID														AS	member_ID
		,	ICD_Code_Type													AS	ICD_Code_Type
		,	REGEXP_REPLACE( primary_ICD10_DX_Code, '[^A-Z0-9]+', '' )		AS	primary_ICD10_DX_Code
		,	REGEXP_REPLACE( secondary_ICD10_DX_Code1, '[^A-Z0-9]+', '' )		AS	secondary_ICD10_DX_Code1
		,	REGEXP_REPLACE( secondary_ICD10_DX_Code2, '[^A-Z0-9]+', '' )		AS	secondary_ICD10_DX_Code2
		,	REGEXP_REPLACE( secondary_ICD10_DX_Code3, '[^A-Z0-9]+', '' )		AS	secondary_ICD10_DX_Code3
		,	claim_Payment_Status_Code										AS	claim_Payment_Status_Code
		,	TCRRV_Amount														AS	TCRRV_Amount
	FROM
		clean_raw.BHI_Professional_Claims
	WHERE		
			claim_Payment_Status_Code	=	'P'
		AND	ICD_Code_Type				=	'2'
		AND	(		(	primary_ICD10_DX_Code		=	ANY(		SELECT	ICD10_DX_code
																FROM		whaight.BHI_ICD10_DX_codes_in_paid_claims_not_CDC )	)
				OR	(	secondary_ICD10_DX_Code1		=	ANY(		SELECT	ICD10_DX_code
																FROM		whaight.BHI_ICD10_DX_codes_in_paid_claims_not_CDC )	)
				OR	(	secondary_ICD10_DX_Code2		=	ANY(		SELECT	ICD10_DX_code
																FROM		whaight.BHI_ICD10_DX_codes_in_paid_claims_not_CDC )	)
				OR	(	secondary_ICD10_DX_Code3		=	ANY(		SELECT	ICD10_DX_code
																FROM		whaight.BHI_ICD10_DX_codes_in_paid_claims_not_CDC )	)
			)
);

--ANALYZE COMPRESSION	whaight.BHI_professional_claims_with_unlisted_ICD10_DX_1;
ANALYZE				whaight.BHI_professional_claims_with_unlisted_ICD10_DX_1;
VACUUM SORT ONLY		whaight.BHI_professional_claims_with_unlisted_ICD10_DX_1;
ANALYZE				whaight.BHI_professional_claims_with_unlisted_ICD10_DX_1;


/*
To recap:  thus far we have isolated all claims from the facility and professional claims table in which at least one of the listed
ICD10 DX codes fails to appear on the holy, canonical CDC list of ICD10 DX codes.  All this is in service of addressing the question:  How
much money is there associated with these claims?  Here we form a master list of such claims, with columns as indicated below.  The vision
is that from this list it should (OHHH BABY!) be a relatively straightforward matter to restrict to those rows in which the listed ICD10
DX code sits on the big list of codes in the claims but not on the list, and then aggregate the money by the code.
*/
DROP TABLE IF EXISTS		clean_raw.BHI_claims_with_unlisted_ICD10_DX_2;
DROP TABLE IF EXISTS		whaight.BHI_claims_with_unlisted_ICD10_DX_2;
CREATE TABLE				whaight.BHI_claims_with_unlisted_ICD10_DX_2
(		claim_ID			VARCHAR( 12 )		ENCODE	ZSTD
	,	member_ID		VARCHAR( 12 )		ENCODE	ZSTD
	,	ICD10_DX_Code	VARCHAR(  8 )		ENCODE	ZSTD
	,	TCRRV_Amount		NUMERIC( 10, 2 )		ENCODE	ZSTD
)
DISTKEY( ICD10_DX_Code )
COMPOUND SORTKEY( ICD10_DX_Code );



INSERT INTO		whaight.BHI_claims_with_unlisted_ICD10_DX_2
(	SELECT DISTINCT
			BIG_PILE_O_CLAIMS_N_MEMBERS.claim_ID			AS	claim_ID
		,	BIG_PILE_O_CLAIMS_N_MEMBERS.member_ID		AS	member_ID
		,	BIG_PILE_O_CLAIMS_N_MEMBERS.ICD10_DX_Code	AS	ICD10_DX_Code
		,	BIG_PILE_O_CLAIMS_N_MEMBERS.TCRRV_Amount		AS	TCRRV_Amount
	FROM
		(			(	SELECT DISTINCT		claim_ID						AS	claim_ID
										,	member_ID					AS	member_ID
										,	admitting_ICD10_DX_Code		AS	ICD10_DX_Code
										,	TCRRV_Amount					AS	TCRRV_Amount
						FROM				whaight.BHI_facility_claims_with_unlisted_ICD10_DX_1
						WHERE			ICD10_DX_Code	=	ANY(		SELECT	ICD10_DX_code
																	FROM		whaight.BHI_ICD10_DX_codes_in_paid_claims_not_CDC )	)
			UNION	(	SELECT DISTINCT		claim_ID						AS	claim_ID
										,	member_ID					AS	member_ID
										,	primary_ICD10_DX_Code		AS	ICD10_DX_Code
										,	TCRRV_Amount					AS	TCRRV_Amount
						FROM				whaight.BHI_facility_claims_with_unlisted_ICD10_DX_1
						WHERE			ICD10_DX_Code	=	ANY(		SELECT	ICD10_DX_code
																	FROM		whaight.BHI_ICD10_DX_codes_in_paid_claims_not_CDC )	)
			UNION	(	SELECT DISTINCT		claim_ID						AS	claim_ID
										,	member_ID					AS	member_ID
										,	secondary_ICD10_DX_Code1		AS	ICD10_DX_Code
										,	TCRRV_Amount					AS	TCRRV_Amount
						FROM				whaight.BHI_facility_claims_with_unlisted_ICD10_DX_1
						WHERE			ICD10_DX_Code	=	ANY(		SELECT	ICD10_DX_code
																	FROM		whaight.BHI_ICD10_DX_codes_in_paid_claims_not_CDC )	)
			UNION	(	SELECT DISTINCT		claim_ID						AS	claim_ID
										,	member_ID					AS	member_ID
										,	secondary_ICD10_DX_Code2		AS	ICD10_DX_Code
										,	TCRRV_Amount					AS	TCRRV_Amount
						FROM				whaight.BHI_facility_claims_with_unlisted_ICD10_DX_1
						WHERE			ICD10_DX_Code	=	ANY(		SELECT	ICD10_DX_code
																	FROM		whaight.BHI_ICD10_DX_codes_in_paid_claims_not_CDC )	)
			UNION	(	SELECT DISTINCT		claim_ID						AS	claim_ID
										,	member_ID					AS	member_ID
										,	secondary_ICD10_DX_Code3		AS	ICD10_DX_Code
										,	TCRRV_Amount					AS	TCRRV_Amount
						FROM				whaight.BHI_facility_claims_with_unlisted_ICD10_DX_1
						WHERE			ICD10_DX_Code	=	ANY(		SELECT	ICD10_DX_code
																	FROM		whaight.BHI_ICD10_DX_codes_in_paid_claims_not_CDC )	)
			UNION	(	SELECT DISTINCT		claim_ID						AS	claim_ID
										,	member_ID					AS	member_ID
										,	secondary_ICD10_DX_Code4		AS	ICD10_DX_Code
										,	TCRRV_Amount					AS	TCRRV_Amount
						FROM				whaight.BHI_facility_claims_with_unlisted_ICD10_DX_1
						WHERE			ICD10_DX_Code	=	ANY(		SELECT	ICD10_DX_code
																	FROM		whaight.BHI_ICD10_DX_codes_in_paid_claims_not_CDC )	)
			UNION	(	SELECT DISTINCT		claim_ID						AS	claim_ID
										,	member_ID					AS	member_ID
										,	secondary_ICD10_DX_Code5		AS	ICD10_DX_Code
										,	TCRRV_Amount					AS	TCRRV_Amount
						FROM				whaight.BHI_facility_claims_with_unlisted_ICD10_DX_1
						WHERE			ICD10_DX_Code	=	ANY(		SELECT	ICD10_DX_code
																	FROM		whaight.BHI_ICD10_DX_codes_in_paid_claims_not_CDC )	)
			UNION	(	SELECT DISTINCT		claim_ID						AS	claim_ID
										,	member_ID					AS	member_ID
										,	secondary_ICD10_DX_Code6		AS	ICD10_DX_Code
										,	TCRRV_Amount					AS	TCRRV_Amount
						FROM				whaight.BHI_facility_claims_with_unlisted_ICD10_DX_1
						WHERE			ICD10_DX_Code	=	ANY(		SELECT	ICD10_DX_code
																	FROM		whaight.BHI_ICD10_DX_codes_in_paid_claims_not_CDC )	)
			UNION	(	SELECT DISTINCT		claim_ID						AS	claim_ID
										,	member_ID					AS	member_ID
										,	secondary_ICD10_DX_Code7		AS	ICD10_DX_Code
										,	TCRRV_Amount					AS	TCRRV_Amount
						FROM				whaight.BHI_facility_claims_with_unlisted_ICD10_DX_1
						WHERE			ICD10_DX_Code	=	ANY(		SELECT	ICD10_DX_code
																	FROM		whaight.BHI_ICD10_DX_codes_in_paid_claims_not_CDC )	)
			UNION	(	SELECT DISTINCT		claim_ID						AS	claim_ID
										,	member_ID					AS	member_ID
										,	secondary_ICD10_DX_Code8		AS	ICD10_DX_Code
										,	TCRRV_Amount					AS	TCRRV_Amount
						FROM				whaight.BHI_facility_claims_with_unlisted_ICD10_DX_1
						WHERE			ICD10_DX_Code	=	ANY(		SELECT	ICD10_DX_code
																	FROM		whaight.BHI_ICD10_DX_codes_in_paid_claims_not_CDC )	)
			UNION	(	SELECT DISTINCT		claim_ID						AS	claim_ID
										,	member_ID					AS	member_ID
										,	secondary_ICD10_DX_Code9		AS	ICD10_DX_Code
										,	TCRRV_Amount					AS	TCRRV_Amount
						FROM				whaight.BHI_facility_claims_with_unlisted_ICD10_DX_1
						WHERE			ICD10_DX_Code	=	ANY(		SELECT	ICD10_DX_code
																	FROM		whaight.BHI_ICD10_DX_codes_in_paid_claims_not_CDC )	)
			UNION	(	SELECT DISTINCT		claim_ID						AS	claim_ID
										,	member_ID					AS	member_ID
										,	secondary_ICD10_DX_Code10	AS	ICD10_DX_Code
										,	TCRRV_Amount					AS	TCRRV_Amount
						FROM				whaight.BHI_facility_claims_with_unlisted_ICD10_DX_1
						WHERE			ICD10_DX_Code	=	ANY(		SELECT	ICD10_DX_code
																	FROM		whaight.BHI_ICD10_DX_codes_in_paid_claims_not_CDC )	)
			UNION	(	SELECT DISTINCT		claim_ID						AS	claim_ID
										,	member_ID					AS	member_ID
										,	primary_ICD10_DX_Code		AS	ICD10_DX_Code
										,	TCRRV_Amount					AS	TCRRV_Amount
						FROM				whaight.BHI_professional_claims_with_unlisted_ICD10_DX_1
						WHERE			ICD10_DX_Code	=	ANY(		SELECT	ICD10_DX_code
																	FROM		whaight.BHI_ICD10_DX_codes_in_paid_claims_not_CDC )	)
			UNION	(	SELECT DISTINCT		claim_ID						AS	claim_ID
										,	member_ID					AS	member_ID
										,	secondary_ICD10_DX_Code1		AS	ICD10_DX_Code
										,	TCRRV_Amount					AS	TCRRV_Amount
						FROM				whaight.BHI_professional_claims_with_unlisted_ICD10_DX_1
						WHERE			ICD10_DX_Code	=	ANY(		SELECT	ICD10_DX_code
																	FROM		whaight.BHI_ICD10_DX_codes_in_paid_claims_not_CDC )	)
			UNION	(	SELECT DISTINCT		claim_ID						AS	claim_ID
										,	member_ID					AS	member_ID
										,	secondary_ICD10_DX_Code2		AS	ICD10_DX_Code
										,	TCRRV_Amount					AS	TCRRV_Amount
						FROM				whaight.BHI_professional_claims_with_unlisted_ICD10_DX_1
						WHERE			ICD10_DX_Code	=	ANY(		SELECT	ICD10_DX_code
																	FROM		whaight.BHI_ICD10_DX_codes_in_paid_claims_not_CDC )	)
			UNION	(	SELECT DISTINCT		claim_ID						AS	claim_ID
										,	member_ID					AS	member_ID
										,	secondary_ICD10_DX_Code3		AS	ICD10_DX_Code
										,	TCRRV_Amount					AS	TCRRV_Amount
						FROM				whaight.BHI_professional_claims_with_unlisted_ICD10_DX_1
						WHERE			ICD10_DX_Code	=	ANY(		SELECT	ICD10_DX_code
																	FROM		whaight.BHI_ICD10_DX_codes_in_paid_claims_not_CDC )	)
		)	BIG_PILE_O_CLAIMS_N_MEMBERS
);

--ANALYZE COMPRESSION	whaight.BHI_claims_with_unlisted_ICD10_DX_2;
ANALYZE				whaight.BHI_claims_with_unlisted_ICD10_DX_2;
VACUUM SORT ONLY		whaight.BHI_claims_with_unlisted_ICD10_DX_2;
ANALYZE				whaight.BHI_claims_with_unlisted_ICD10_DX_2;


/*
OK, so here we are at the end of the trail:  we pull quadruples claims/members/amounts/ICD10_DX_Codes from the last table we built, i.e.
clean_raw.BHI_claims_with_unlisted_ICD10_DX_2, and restrict to those for which the ICD10_DX_Code is in the set of funny claims,
whaight.BHI_ICD10_DX_codes_in_paid_claims_not_CDC.  Finally we group by the ICD_DX_Code, count the number of patients with that code, add
up the amount spent on claims mentioning that code, sort by the code and stick it in the table.
*/
DROP TABLE IF EXISTS	whaight.BHI_claims_with_unlisted_ICD10_DX_money;
CREATE TABLE			whaight.BHI_claims_with_unlisted_ICD10_DX_money
(		ICD10_DX_Code		VARCHAR( 8 )			ENCODE	RAW
	,	Patient_count		INTEGER				ENCODE	RAW
	,	Total_Spent			NUMERIC( 16, 2 )		ENCODE	RAW
)
DISTKEY( ICD10_DX_Code )
COMPOUND SORTKEY( ICD10_DX_Code );



INSERT INTO		whaight.BHI_claims_with_unlisted_ICD10_DX_money
(	SELECT DISTINCT
			ICD10_DX_Code			AS	ICD10_DX_Code
		,	COUNT( member_ID )		AS	Patient_count
		,	SUM( TCRRV_Amount )		AS	Total_Spent
	FROM
		whaight.BHI_claims_with_unlisted_ICD10_DX_2
	WHERE
		ICD10_DX_Code	=	ANY(	SELECT	ICD10_DX_code
									FROM	whaight.BHI_ICD10_DX_codes_in_paid_claims_not_CDC	)
	GROUP BY
		ICD10_DX_Code
	ORDER BY
		ICD10_DX_Code
);

--ANALYZE COMPRESSION	whaight.BHI_claims_with_unlisted_ICD10_DX_money;
ANALYZE				whaight.BHI_claims_with_unlisted_ICD10_DX_money;
VACUUM SORT ONLY	whaight.BHI_claims_with_unlisted_ICD10_DX_money;
ANALYZE				whaight.BHI_claims_with_unlisted_ICD10_DX_money;


DROP TABLE IF EXISTS	clean_raw.BHI_claims_with_unlisted_ICD10_DX_money;
DROP TABLE IF EXISTS	clean_raw.BHI_facility_claims_with_unlisted_ICD10_DX;
DROP TABLE IF EXISTS	clean_raw.BHI_facility_claims_with_unlisted_ICD10_DX_3;
DROP TABLE IF EXISTS	clean_raw.BHI_ICD10_pcs_codes;
DROP TABLE IF EXISTS	clean_raw.BHI_prevalence_ICD10;
DROP TABLE IF EXISTS	clean_raw.BHI_prevalence_ICD9;
</SQL>
    <Name>ICD10 investigations</Name>
  </Query>
</QuerySet>